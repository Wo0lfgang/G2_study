'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var gLite = require('@antv/g-lite');
var util = require('@antv/util');

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

var HTML_PREFIX = 'g-html-';
var CANVAS_CAMERA_ID = 'g-canvas-camera';
var HTMLRenderingPlugin = /*#__PURE__*/function () {
  function HTMLRenderingPlugin() {
    this.context = void 0;
    this.$camera = void 0;
  }
  var _proto = HTMLRenderingPlugin.prototype;
  _proto.joinTransformMatrix = function joinTransformMatrix(matrix) {
    return "matrix(" + [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]].join(',') + ")";
  };
  _proto.apply = function apply(context) {
    var _this = this;
    var camera = context.camera,
      renderingContext = context.renderingContext,
      renderingService = context.renderingService,
      displayObjectPool = context.displayObjectPool;
    this.context = context;
    var canvas = renderingContext.root.ownerDocument.defaultView;
    var setTransform = function setTransform(object, $el) {
      $el.style.transform = _this.joinTransformMatrix(object.getWorldTransform());
    };
    var handleMounted = function handleMounted(e) {
      var object = e.target;
      if (object.nodeName === gLite.Shape.HTML) {
        if (!_this.$camera) {
          _this.$camera = _this.createCamera(camera);
        }
        // create DOM element
        var $el = _this.getOrCreateEl(object);
        _this.$camera.appendChild($el);
        // apply documentElement's style
        var attributes = object.ownerDocument.documentElement.attributes;
        Object.keys(attributes).forEach(function (name) {
          $el.style[name] = attributes[name];
        });
        Object.keys(object.attributes).forEach(function (name) {
          _this.updateAttribute(name, object);
        });
        setTransform(object, $el);
      }
    };
    var handleUnmounted = function handleUnmounted(e) {
      var object = e.target;
      if (object.nodeName === gLite.Shape.HTML && _this.$camera) {
        var $el = _this.getOrCreateEl(object);
        if ($el) {
          $el.remove();
        }
        // const existedId = this.getId(object);
        // const $existedElement: HTMLElement | null = this.$camera.querySelector('#' + existedId);
        // if ($existedElement) {
        //   this.$camera.removeChild($existedElement);
        // }
      }
    };

    var handleAttributeChanged = function handleAttributeChanged(e) {
      var object = e.target;
      if (object.nodeName === gLite.Shape.HTML) {
        var attrName = e.attrName;
        _this.updateAttribute(attrName, object);
      }
    };
    var handleBoundsChanged = function handleBoundsChanged(e) {
      var object = e.target;
      if (object.nodeName === gLite.Shape.HTML) {
        var $el = _this.getOrCreateEl(object);
        setTransform(object, $el);
      }
    };
    var handleCanvasResize = function handleCanvasResize() {
      if (_this.$camera) {
        var _this$context$config = _this.context.config,
          width = _this$context$config.width,
          height = _this$context$config.height;
        _this.$camera.style.width = (width || 0) + "px";
        _this.$camera.style.height = (height || 0) + "px";
      }
    };
    renderingService.hooks.init.tapPromise(HTMLRenderingPlugin.tag, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (displayObjectPool.getHTMLs().length) {
                // append camera
                _this.$camera = _this.createCamera(camera);
              }
              canvas.addEventListener(gLite.CanvasEvent.RESIZE, handleCanvasResize);
              canvas.addEventListener(gLite.ElementEvent.MOUNTED, handleMounted);
              canvas.addEventListener(gLite.ElementEvent.UNMOUNTED, handleUnmounted);
              canvas.addEventListener(gLite.ElementEvent.ATTR_MODIFIED, handleAttributeChanged);
              canvas.addEventListener(gLite.ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);
            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    renderingService.hooks.endFrame.tap(HTMLRenderingPlugin.tag, function () {
      if (_this.$camera && renderingContext.renderReasons.has(gLite.RenderReason.CAMERA_CHANGED)) {
        _this.$camera.style.transform = _this.joinTransformMatrix(camera.getOrthoMatrix());
      }
    });
    renderingService.hooks.destroy.tap(HTMLRenderingPlugin.tag, function () {
      // remove camera
      if (_this.$camera) {
        _this.$camera.remove();
      }
      canvas.removeEventListener(gLite.CanvasEvent.RESIZE, handleCanvasResize);
      canvas.removeEventListener(gLite.ElementEvent.MOUNTED, handleMounted);
      canvas.removeEventListener(gLite.ElementEvent.UNMOUNTED, handleUnmounted);
      canvas.removeEventListener(gLite.ElementEvent.ATTR_MODIFIED, handleAttributeChanged);
      canvas.removeEventListener(gLite.ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);
    });
  };
  _proto.getId = function getId(object) {
    return object.id || HTML_PREFIX + object.entity;
  };
  _proto.createCamera = function createCamera(camera) {
    var _this$context$config2 = this.context.config,
      doc = _this$context$config2.document,
      width = _this$context$config2.width,
      height = _this$context$config2.height;
    var $canvas = this.context.contextService.getDomElement();
    var $container = $canvas.parentNode;
    if ($container) {
      var cameraId = CANVAS_CAMERA_ID;
      var $existedCamera = $container.querySelector('#' + cameraId);
      if (!$existedCamera) {
        var $camera = (doc || document).createElement('div');
        $existedCamera = $camera;
        $camera.id = cameraId;
        // use absolute position
        $camera.style.position = 'absolute';
        // account for DOM element's offset @see https://github.com/antvis/G/issues/1150
        $camera.style.left = ($canvas.offsetLeft || 0) + "px";
        $camera.style.top = ($canvas.offsetTop || 0) + "px";
        $camera.style.transformOrigin = 'left top';
        $camera.style.transform = this.joinTransformMatrix(camera.getOrthoMatrix());
        // HTML elements should not overflow with canvas @see https://github.com/antvis/G/issues/1163
        $camera.style.overflow = 'hidden';
        $camera.style.pointerEvents = 'none';
        $camera.style.width = (width || 0) + "px";
        $camera.style.height = (height || 0) + "px";
        $container.appendChild($camera);
      }
      return $existedCamera;
    }
    return null;
  };
  _proto.getOrCreateEl = function getOrCreateEl(object) {
    var doc = this.context.config.document;
    var existedId = this.getId(object);
    var $existedElement = this.$camera.querySelector('#' + existedId);
    if (!$existedElement) {
      $existedElement = (doc || document).createElement('div');
      object.parsedStyle.$el = $existedElement;
      $existedElement.id = existedId;
      if (object.name) {
        $existedElement.setAttribute('name', object.name);
      }
      if (object.className) {
        $existedElement.className = object.className;
      }
      // use absolute position
      $existedElement.style.position = 'absolute';
      // @see https://github.com/antvis/G/issues/1150
      $existedElement.style.left = "0px";
      $existedElement.style.top = "0px";
      $existedElement.style['will-change'] = 'transform';
      $existedElement.style.transform = this.joinTransformMatrix(object.getWorldTransform());
    }
    return $existedElement;
  };
  _proto.updateAttribute = function updateAttribute(name, object) {
    var $el = this.getOrCreateEl(object);
    switch (name) {
      case 'innerHTML':
        var innerHTML = object.parsedStyle.innerHTML;
        if (util.isString(innerHTML)) {
          $el.innerHTML = innerHTML;
        } else {
          $el.innerHTML = '';
          $el.appendChild(innerHTML);
        }
        break;
      case 'transformOrigin':
        var transformOrigin = object.parsedStyle.transformOrigin;
        $el.style['transform-origin'] = transformOrigin[0].value + " " + transformOrigin[1].value;
        break;
      case 'width':
        if (gLite.runtime.enableCSSParsing) {
          var width = object.computedStyleMap().get('width');
          $el.style.width = width.toString();
        } else {
          var _width = object.parsedStyle.width;
          $el.style.width = util.isNumber(_width) ? _width + "px" : _width.toString();
        }
        break;
      case 'height':
        if (gLite.runtime.enableCSSParsing) {
          var height = object.computedStyleMap().get('height');
          $el.style.height = height.toString();
        } else {
          var _height = object.parsedStyle.height;
          $el.style.height = util.isNumber(_height) ? _height + "px" : _height.toString();
        }
        break;
      case 'zIndex':
        var zIndex = object.parsedStyle.zIndex;
        $el.style['z-index'] = "" + zIndex;
        break;
      case 'visibility':
        var visibility = object.parsedStyle.visibility;
        $el.style.visibility = visibility;
        break;
      case 'pointerEvents':
        var pointerEvents = object.parsedStyle.pointerEvents;
        $el.style.pointerEvents = pointerEvents;
        break;
      case 'opacity':
        var opacity = object.parsedStyle.opacity;
        $el.style.opacity = "" + opacity;
        break;
      case 'fill':
        var fill = object.parsedStyle.fill;
        var color = '';
        if (gLite.isCSSRGB(fill)) {
          if (fill.isNone) {
            color = 'transparent';
          } else {
            color = object.getAttribute('fill');
          }
        } else if (Array.isArray(fill)) {
          color = object.getAttribute('fill');
        } else if (gLite.isPattern(fill)) ;
        $el.style.background = color;
        break;
      case 'stroke':
        var stroke = object.parsedStyle.stroke;
        var borderColor = '';
        if (gLite.isCSSRGB(stroke)) {
          if (stroke.isNone) {
            borderColor = 'transparent';
          } else {
            borderColor = object.getAttribute('stroke');
          }
        } else if (Array.isArray(stroke)) {
          borderColor = object.getAttribute('stroke');
        } else if (gLite.isPattern(stroke)) ;
        $el.style['border-color'] = borderColor;
        $el.style['border-style'] = 'solid';
        break;
      case 'lineWidth':
        var lineWidth = object.parsedStyle.lineWidth;
        $el.style['border-width'] = (lineWidth || 0) + "px";
        break;
      case 'lineDash':
        $el.style['border-style'] = 'dashed';
        break;
      case 'filter':
        var filter = object.style.filter;
        $el.style.filter = filter;
        break;
    }
  };
  return HTMLRenderingPlugin;
}();
HTMLRenderingPlugin.tag = 'HTMLRendering';

var Plugin = /*#__PURE__*/function (_AbstractRendererPlug) {
  _inheritsLoose(Plugin, _AbstractRendererPlug);
  function Plugin() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _AbstractRendererPlug.call.apply(_AbstractRendererPlug, [this].concat(args)) || this;
    _this.name = 'html-renderer';
    return _this;
  }
  var _proto = Plugin.prototype;
  _proto.init = function init() {
    this.addRenderingPlugin(new HTMLRenderingPlugin());
  };
  _proto.destroy = function destroy() {
    this.removeAllRenderingPlugins();
  };
  return Plugin;
}(gLite.AbstractRendererPlugin);

exports.Plugin = Plugin;
