import { __assign, __extends, __read } from "tslib";
import { GUI } from '../../core/gui';
import { BBox, deepAssign, select, styleSeparator, subObject, subObjects } from '../../util';
import { getBBox, Title } from '../title';
import { CategoryItems } from './category/items';
import { CATEGORY_DEFAULT_OPTIONS, CLASS_NAMES } from './constant';
var Category = /** @class */ (function (_super) {
    __extends(Category, _super);
    function Category(config) {
        return _super.call(this, deepAssign({}, CATEGORY_DEFAULT_OPTIONS, config)) || this;
    }
    Category.prototype.renderTitle = function (container, width, height) {
        var _a = this.attributes, showTitle = _a.showTitle, titleText = _a.titleText;
        var style = subObject(this.attributes, 'title');
        var _b = __read(styleSeparator(style), 2), titleStyle = _b[0], groupStyle = _b[1];
        this.titleGroup = container.maybeAppendByClassName(CLASS_NAMES.titleGroup, 'g').styles(groupStyle);
        var finalTitleStyle = __assign(__assign({ width: width, height: height }, titleStyle), { text: showTitle ? titleText : '' });
        this.title = this.titleGroup
            .maybeAppendByClassName(CLASS_NAMES.title, function () { return new Title({ style: finalTitleStyle }); })
            .update(finalTitleStyle);
    };
    Category.prototype.renderItems = function (container, bbox) {
        var x = bbox.x, y = bbox.y, width = bbox.width, height = bbox.height;
        var _a = __read(subObjects(this.attributes, ['title']), 2), style = _a[1];
        var _b = __read(styleSeparator(style), 2), partialItemStyle = _b[0], groupStyle = _b[1];
        // rewrite width and height to available space
        var itemStyle = __assign(__assign({}, partialItemStyle), { width: width, height: height });
        this.itemsGroup = container
            .maybeAppendByClassName(CLASS_NAMES.itemsGroup, 'g')
            .styles(__assign({ x: x, y: y }, groupStyle));
        this.items = this.itemsGroup.maybeAppendByClassName(CLASS_NAMES.items, function () {
            return new CategoryItems({
                style: {
                    data: [],
                },
            });
        });
        this.items.node().update(itemStyle);
    };
    Category.prototype.adjustLayout = function () {
        var showTitle = this.attributes.showTitle;
        if (showTitle) {
            var _a = this.title.node().getAvailableSpace(), x = _a.x, y = _a.y;
            this.itemsGroup.node().setLocalPosition(x, y);
        }
    };
    Object.defineProperty(Category.prototype, "availableSpace", {
        get: function () {
            var _a = this.attributes, showTitle = _a.showTitle, width = _a.width, height = _a.height;
            if (!showTitle)
                return new BBox(0, 0, width, height);
            return this.title.node().getAvailableSpace();
        },
        enumerable: false,
        configurable: true
    });
    Category.prototype.getBBox = function () {
        return getBBox(this.title.node(), this.items.node());
    };
    Category.prototype.render = function (attributes, container) {
        var width = attributes.width, height = attributes.height;
        var ctn = select(container);
        this.renderTitle(ctn, width, height);
        this.renderItems(ctn, this.availableSpace);
        this.adjustLayout();
    };
    return Category;
}(GUI));
export { Category };
//# sourceMappingURL=category.js.map