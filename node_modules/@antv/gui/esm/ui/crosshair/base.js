import { __assign, __extends, __read, __rest } from "tslib";
import { deepMix } from '@antv/util';
import { GUI } from '../../core/gui';
import { select, subObject } from '../../util';
import { Tag } from '../tag';
import { CROSSHAIR_BASE_DEFAULT_STYLE } from './constant';
var CrosshairBase = /** @class */ (function (_super) {
    __extends(CrosshairBase, _super);
    function CrosshairBase(options) {
        return _super.call(this, deepMix({}, CrosshairBase.defaultOptions, options)) || this;
    }
    Object.defineProperty(CrosshairBase.prototype, "localPointer", {
        /**
         * 获得 pointer 的相对坐标
         */
        get: function () {
            var _a = __read(this.getPosition(), 2), bx = _a[0], by = _a[1];
            var _b = __read(this.pointer, 2), x = _b[0], y = _b[1];
            return [x - bx, y - by];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrosshairBase.prototype, "tagCfg", {
        get: function () {
            var tagStyle = subObject(this.attributes, 'tag');
            var position = tagStyle.position, rest = __rest(tagStyle, ["position"]);
            return rest;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrosshairBase.prototype, "crosshairCfg", {
        get: function () {
            var lineStyle = subObject(this.attributes, 'line');
            return __assign(__assign({}, lineStyle), { path: this.crosshairPath });
        },
        enumerable: false,
        configurable: true
    });
    CrosshairBase.prototype.render = function (attributes, container) {
        var _this = this;
        var group = select(container).maybeAppendByClassName('.crosshair-group', 'g').node();
        this.shapesGroup = group;
        this.tagShape = select(group)
            .maybeAppend('.crosshair-tag', function () { return new Tag({ className: 'crosshair-tag', style: _this.tagCfg }); })
            .node();
        this.crosshairShape = select(group)
            .maybeAppendByClassName('.crosshair-path', 'path')
            .node()
            .attr(this.crosshairCfg);
        this.adjustLayout();
    };
    CrosshairBase.prototype.update = function (cfg) {
        if (cfg === void 0) { cfg = {}; }
        this.attr(deepMix({}, this.attributes, cfg));
        this.render(this.attributes, this);
    };
    /**
     * 设置当前指针的位置
     * 1. 线条类型 调整位置即可
     * 2. circle 和 polygon 需要重新计算 path
     */
    CrosshairBase.prototype.setPointer = function (pointer) {
        this.pointer = pointer;
    };
    CrosshairBase.tag = 'crosshair-base';
    CrosshairBase.defaultOptions = {
        style: CROSSHAIR_BASE_DEFAULT_STYLE,
    };
    return CrosshairBase;
}(GUI));
export { CrosshairBase };
//# sourceMappingURL=base.js.map