import ellipsis from './autoEllipsis';
import hide from './autoHide';
import rotate from './autoRotate';
export var OverlapUtils = new Map([
    ['hide', hide],
    ['rotate', rotate],
    ['ellipsis', ellipsis],
]);
export function canProcessOverlap(labels, cfg, type) {
    if (!cfg.labelTransforms)
        return false;
    // if (type === 'rotate') return !labels.some((label) => hasSetRotate(label.attr('transform')));
    if (type === 'ellipsis')
        return labels.map(function (item) { return item.querySelector('text'); }).length > 1;
    return true;
}
export function processOverlap(labels, cfg, utils) {
    var _a = cfg.labelTransforms, overlapOrder = _a === void 0 ? [] : _a;
    if (!overlapOrder.length)
        return;
    overlapOrder.forEach(function (overlapCfg) {
        var type = overlapCfg.type;
        var util = OverlapUtils.get(type);
        if (canProcessOverlap(labels, cfg, type))
            util === null || util === void 0 ? void 0 : util(labels, overlapCfg, cfg, utils);
    });
}
//# sourceMappingURL=index.js.map