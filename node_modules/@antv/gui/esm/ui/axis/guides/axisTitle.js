import { __read, __rest } from "tslib";
import { vec2 } from '@antv/matrix-util';
import { percentTransform, renderExtDo, styleSeparator } from '../../../util';
import { parsePosition } from '../../title';
import { CLASS_NAMES } from '../constant';
function getTitlePosition(mainGroup, titleGroup, cfg) {
    var _a = cfg.titlePosition, position = _a === void 0 ? 'lb' : _a, _b = cfg.titleSpacing, spacing = _b === void 0 ? 0 : _b;
    var pos = parsePosition(position);
    var _c = mainGroup.node().getBBox(), ax = _c.x, ay = _c.y;
    var _d = __read(mainGroup.node().getBounds().halfExtents, 2), aHw = _d[0], aHh = _d[1];
    var _e = __read(titleGroup.node().getBounds().halfExtents, 2), tHw = _e[0], tHh = _e[1];
    var _f = __read([ax + aHw, ay + aHh], 2), lcx = _f[0], lcy = _f[1];
    var _g = __read([lcx, lcy], 2), x = _g[0], y = _g[1];
    if (['start', 'end'].includes(position) && cfg.type === 'linear') {
        var startPos = cfg.startPos, endPos = cfg.endPos;
        // todo did not consider the truncate case
        var _h = __read(position === 'start' ? [startPos, endPos] : [endPos, startPos], 2), from = _h[0], to = _h[1];
        var direction = vec2.normalize([0, 0], [-to[0] + from[0], -to[1] + from[1]]);
        var _j = __read(vec2.scale([0, 0], direction, spacing), 2), dx = _j[0], dy = _j[1];
        return { x: from[0] + dx, y: from[1] + dy };
    }
    if (pos.includes('l'))
        x -= aHw + tHw + spacing;
    if (pos.includes('r'))
        x += aHw + tHw + spacing;
    if (pos.includes('t'))
        y -= aHh + tHh + spacing;
    if (pos.includes('b'))
        y += aHh + tHh + spacing;
    return { x: x, y: y };
}
function getTitleLayout(axis, titleGroup, cfg) {
    var mainGroup = axis.select(CLASS_NAMES.mainGroup.class);
    return getTitlePosition(mainGroup, titleGroup, cfg);
}
function createTitle(container, cfg) {
    var title = cfg.title;
    var titleEl = container.maybeAppendByClassName(CLASS_NAMES.title, function () { return renderExtDo(title); });
    return [container, titleEl];
}
function applyTitleStyle(title, group, axis, cfg, style) {
    var _a = __read(styleSeparator(style), 2), titleStyle = _a[0], _b = _a[1], _c = _b.transform, transform = _c === void 0 ? '' : _c, groupStyle = __rest(_b, ["transform"]);
    title.styles(titleStyle);
    group.styles(groupStyle);
    var _d = getTitleLayout(axis, group, cfg), x = _d.x, y = _d.y;
    group.node().setPosition(x, y);
    percentTransform(title, transform);
}
export function renderTitle(container, axis, cfg, style, animate) {
    if (!cfg.title)
        return null;
    var _a = __read(createTitle(container, cfg), 2), group = _a[0], title = _a[1];
    var apply = function () { return applyTitleStyle(title, group, axis, cfg, style); };
    if (!animate.update) {
        apply();
        return null;
    }
    var animation = title.node().animate([], animate.update);
    if (animation) {
        animation.onframe = function () { return apply(); };
        animation.onfinish = function () { return apply(); };
    }
    else
        apply();
    return animation;
}
//# sourceMappingURL=axisTitle.js.map