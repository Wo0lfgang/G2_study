import { __read, __spreadArray, __values } from "tslib";
import { intersect } from '../../../layout/intersect';
var nonempty = function (x) { return x !== undefined && x != null && "".concat(x) !== ''; };
export function assignNonempty(target, source) {
    var e_1, _a;
    try {
        for (var _b = __values(Object.entries(source)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            if (nonempty(value)) {
                target[key] = source[key];
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return target;
}
export function boundTest(items, margin) {
    var prev;
    return __spreadArray([], __read(items.reduce(function (acc, curr, index) {
        return !index || !prev || !intersect(prev, curr, margin)
            ? ((prev = curr), acc)
            : (acc.add(prev), acc.add(curr), acc);
    }, new Set())), false);
}
//# sourceMappingURL=helper.js.map