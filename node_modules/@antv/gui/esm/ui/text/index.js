import { __assign, __extends } from "tslib";
import { Text as GText, Rect, Group } from '@antv/g';
import { pick, max, isNumber } from '@antv/util';
import { Decoration } from './decoration';
import { deepAssign, transform, getEllipsisText, getShapeSpace, measureTextWidth, TEXT_INHERITABLE_PROPS, } from '../../util';
import { GUI } from '../../core/gui';
/**
 * 渲染流程
 * 1. transform
 * 2. create text shape
 * 3. overflow
 * 4. layout
 * 5. create decoration
 * 6. create background
 * 7. set anchor
 */
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(options) {
        var _this = _super.call(this, deepAssign({}, Text.defaultOptions, options)) || this;
        _this.init();
        return _this;
    }
    Object.defineProperty(Text.prototype, "textWidth", {
        /**
         * 文字行宽
         * 如果多行则取最长宽度
         * 在文字渲染之前也可获得
         */
        get: function () {
            var _this = this;
            return max(this.renderText.split('\n').map(function (text) { return measureTextWidth(text, _this.font); })) || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "textHeight", {
        get: function () {
            return getShapeSpace(this.textShape).height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "width", {
        /**
         * 文本包围盒宽度
         */
        get: function () {
            var width = this.attributes.width;
            // 度量文字长度
            if (width === 'auto' || width === undefined || width === 0)
                return this.textWidth;
            return width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "height", {
        /**
         * 文本包围盒高度
         */
        get: function () {
            var height = this.attributes.height;
            if (isNumber(height) && height !== 0)
                return height;
            return getShapeSpace(this.textShape).height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "lineHeight", {
        get: function () {
            var _a = this.attributes, lineHeight = _a.lineHeight, fontSize = _a.fontSize;
            if (!lineHeight || lineHeight === 0)
                return fontSize;
            return lineHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "capitalizeWord", {
        /**
         * 单词字母首大写
         */
        get: function () {
            var text = this.attributes.text;
            // 对每个词、每行进行 transform
            return text
                .split('\n')
                .map(function (line) {
                return line
                    .split(' ')
                    .map(function (word) {
                    return transform(word, 'capitalize');
                })
                    .join(' ');
            })
                .join('\n');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "text", {
        /**
         * transform 后的文本
         */
        get: function () {
            var _a = this.attributes, tf = _a.transform, text = _a.text;
            if (tf === 'capitalize')
                return this.capitalizeWord;
            return transform(text, tf);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "ellipsisText", {
        get: function () {
            var _this = this;
            var text = this.text;
            var _a = this.attributes, width = _a.width, overflow = _a.overflow;
            var placeholder = (overflow === 'ellipsis' ? '...' : overflow);
            return text
                .split('\n')
                .map(function (line) {
                return getEllipsisText(line, isNumber(width) ? width : Infinity, _this.font, placeholder);
            })
                .join('\n');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "renderText", {
        /**
         * 最终渲染的文本
         */
        get: function () {
            var width = this.attributes.width;
            var overflow = this.attributes.overflow;
            if (overflow && !['none', 'clip', 'wrap'].includes(overflow) && isNumber(width))
                return this.ellipsisText;
            return this.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "verticalAlign", {
        get: function () {
            var verticalAlign = this.attributes.verticalAlign;
            return verticalAlign;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "font", {
        get: function () {
            // @ts-ignore
            return pick(this.attributes, [
                'fontSize',
                'fontFamily',
                'fontWeight',
                'fontStyle',
                'fontVariant',
                'letterSpacing',
                'leading',
            ]);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "fontColor", {
        get: function () {
            var fontColor = this.attributes.fontColor;
            return fontColor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "wordWrap", {
        get: function () {
            var overflow = this.attributes.overflow;
            return overflow === 'wrap';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "wordWrapWidth", {
        get: function () {
            var _a = this, width = _a.width, wordWrap = _a.wordWrap;
            if (!wordWrap)
                return Infinity;
            return width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "textCfg", {
        get: function () {
            var _a = this, renderText = _a.renderText, lineHeight = _a.lineHeight, wordWrap = _a.wordWrap, wordWrapWidth = _a.wordWrapWidth, fill = _a.fontColor;
            return __assign(__assign(__assign({}, TEXT_INHERITABLE_PROPS), this.font), { fill: fill, wordWrap: wordWrap, lineHeight: lineHeight, wordWrapWidth: wordWrapWidth, text: renderText, textAlign: 'start', textBaseline: 'middle' });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "backgroundCfg", {
        get: function () {
            var _a = this, width = _a.width, height = _a.height;
            var backgroundStyle = this.attributes.backgroundStyle;
            return __assign({ x: 0, y: 0, width: width, height: height }, backgroundStyle);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "decorationLineWidth", {
        get: function () {
            var fontSize = this.attributes.fontSize;
            return Math.floor(Math.log10(fontSize) * 2);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "decorationCfg", {
        get: function () {
            var _a = this.attributes, decoration = _a.decoration, fontSize = _a.fontSize;
            var _b = this, lineWidth = _b.decorationLineWidth, stroke = _b.fontColor;
            return this.textShape.getLineBoundingRects().map(function (bbox) {
                return deepAssign({}, { fontSize: fontSize, style: { stroke: stroke, lineWidth: lineWidth } }, decoration, bbox);
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "clipRectCfg", {
        get: function () {
            var height = this.height;
            // 此时width一定存在
            var width = this.attributes.width;
            return { width: width, height: height };
        },
        enumerable: false,
        configurable: true
    });
    Text.prototype.init = function () {
        this.initShape();
        this.update({});
    };
    Text.prototype.update = function (cfg) {
        this.attr(deepAssign({}, this.attributes, cfg));
        this.render();
    };
    Text.prototype.render = function () {
        var _this = this;
        this.clear();
        this.backgroundShape.attr(this.backgroundCfg);
        this.textShape.attr(this.textCfg);
        this.layout();
        this.decorationGroup.removeChildren();
        this.decorationCfg.forEach(function (cfg) {
            _this.decorationGroup.appendChild(new Decoration({ style: cfg }));
        });
    };
    Text.prototype.clear = function () {
        var _a;
        // 移除clipPath
        this.backgroundShape.style.clipPath = null;
        (_a = this.clipRect) === null || _a === void 0 ? void 0 : _a.destroy();
    };
    Text.prototype.initShape = function () {
        this.backgroundShape = new Rect({ name: 'background', style: { width: 0, height: 0 } });
        // this.decorationShape = new Decoration({ name: 'decoration' });
        this.decorationGroup = new Group({ name: 'decoration-group' });
        this.textShape = new GText({ name: 'text', style: this.textCfg });
        this.textShape.appendChild(this.decorationGroup);
        this.backgroundShape.appendChild(this.textShape);
        this.appendChild(this.backgroundShape);
    };
    Text.prototype.overflow = function () {
        var wordWrap = this.wordWrap;
        var _a = this.attributes, width = _a.width, overflow = _a.overflow;
        // 为false\开启换行\未width数值, 则不进行操作
        if (!overflow || overflow === 'none' || wordWrap || !isNumber(width))
            return;
        if (overflow === 'clip') {
            // 裁切
            this.clipRect = new Rect({ name: 'clip-rect', style: this.clipRectCfg });
            this.backgroundShape.style.clipPath = this.clipRect;
            this.backgroundShape.appendChild(this.clipRect);
        }
    };
    Text.prototype.adjustTextAlign = function () {
        var textWidth = this.textWidth;
        var _a = this.attributes, width = _a.width, textAlign = _a.textAlign;
        if (!isNumber(width))
            return;
        var xOffset = 0;
        if (textAlign === 'start')
            xOffset = 0;
        else if (textAlign === 'center')
            xOffset = (this.width - textWidth) / 2;
        else
            xOffset = this.width - textWidth;
        this.textShape.attr({ x: xOffset });
    };
    Text.prototype.adjustVerticalAlign = function () {
        var _a = this, verticalAlign = _a.verticalAlign, textHeight = _a.textHeight;
        var yOffset = 0;
        if (verticalAlign === 'top')
            yOffset = textHeight / 2;
        else if (verticalAlign === 'middle')
            yOffset = this.height / 2;
        else
            yOffset = this.height - textHeight / 2;
        this.textShape.attr({ y: yOffset });
    };
    Text.prototype.layout = function () {
        this.adjustTextAlign();
        this.adjustVerticalAlign();
        this.overflow();
    };
    Text.tag = 'paragraph';
    Text.defaultOptions = {
        style: {
            text: '',
            fontColor: '#000',
            fontFamily: 'sans-serif',
            fontSize: 12,
            fontWeight: 'normal',
            fontVariant: 'normal',
            letterSpacing: 0,
            leading: 0,
            fontStyle: 'normal',
            decoration: {
                type: 'none',
                style: {},
            },
            overflow: 'none',
            backgroundStyle: {},
            transform: 'none',
            tooltip: false,
            tooltipWait: 300,
        },
    };
    return Text;
}(GUI));
export { Text };
//# sourceMappingURL=index.js.map