import type { TextProps, ShapeAttrs, DisplayObjectConfig } from '../../types';
export declare const decorationType: readonly ["overline", "line-through", "underline"];
export declare const decorationShape: readonly ["solid", "wavy", "double", "dashed", "dotted"];
export type DecorationLine = (typeof decorationType)[number];
export type DecorationShape = (typeof decorationShape)[number];
export interface DecorationCfg extends ShapeAttrs {
    width: number;
    height: number;
    fontSize: number;
    hangingRate?: [number, number, number];
    type?: 'none' | Array<DecorationLine | [DecorationLine, DecorationShape]>;
    style?: ShapeAttrs;
}
export type DecorationOptions = DisplayObjectConfig<DecorationCfg>;
export interface TextCfg extends Omit<ShapeAttrs, 'transform'>, Pick<TextProps, 'fontStyle' | 'fontSize' | 'fontFamily' | 'fontWeight' | 'fontVariant' | 'letterSpacing' | 'leading'> {
    x?: number;
    y?: number;
    text?: string;
    width?: number | 'auto';
    height?: number | 'auto';
    lineHeight?: number;
    textAlign?: 'start' | 'center' | 'end';
    verticalAlign?: 'top' | 'middle' | 'bottom' /** | 'sub' | 'sup' */;
    fontColor: string;
    decoration?: Pick<DecorationCfg, 'type' | 'style'>;
    overflow?: 'none' | 'clip' | 'ellipsis' | string;
    transform?: 'none' | 'capitalize' | 'uppercase' | 'lowercase';
    backgroundStyle?: ShapeAttrs;
}
export type TextOptions = DisplayObjectConfig<TextCfg>;
