import { __assign, __extends, __rest } from "tslib";
import { DisplayObject, Group } from '@antv/g';
import { deepMix } from '@antv/util';
import { select } from '../../util';
var Lines = /** @class */ (function (_super) {
    __extends(Lines, _super);
    function Lines(_a) {
        var _this = this;
        var style = _a.style, rest = __rest(_a, ["style"]);
        _this = _super.call(this, deepMix({}, { type: 'lines', style: { width: 0, height: 0 } }, __assign({ style: style }, rest))) || this;
        _this.linesGroup = _this.appendChild(new Group({ name: 'lines' }));
        _this.areasGroup = _this.appendChild(new Group({ name: 'areas' }));
        _this.render();
        return _this;
    }
    Lines.prototype.render = function () {
        var _a = this.attributes, lines = _a.lines, areas = _a.areas;
        if (lines)
            this.createLines(lines);
        if (areas)
            this.createAreas(areas);
    };
    Lines.prototype.clear = function () {
        this.linesGroup.removeChildren();
        this.areasGroup.removeChildren();
    };
    Lines.prototype.update = function (cfg) {
        var lines = cfg.lines, areas = cfg.areas;
        this.clear();
        lines && this.setAttribute('lines', lines);
        areas && this.setAttribute('areas', areas);
        this.render();
    };
    Lines.prototype.createLines = function (lines) {
        select(this.linesGroup)
            .selectAll('line')
            .data(lines)
            .join(function (enter) {
            return enter.append('path').each(function (cfg) {
                select(this).styles(cfg);
            });
        }, function (update) {
            return update.each(function (cfg) {
                select(this).styles(cfg);
            });
        }, function (remove) { return remove.remove(); });
    };
    Lines.prototype.createAreas = function (areas) {
        select(this.linesGroup)
            .selectAll('area')
            .data(areas)
            .join(function (enter) {
            return enter.append('path').each(function (cfg) {
                select(this).styles(cfg);
            });
        }, function (update) {
            return update.each(function (cfg) {
                select(this).styles(cfg);
            });
        }, function (remove) { return remove.remove(); });
    };
    return Lines;
}(DisplayObject));
export { Lines };
//# sourceMappingURL=lines.js.map