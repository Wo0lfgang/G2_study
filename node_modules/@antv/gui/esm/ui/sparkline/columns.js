import { __assign, __extends, __rest } from "tslib";
import { DisplayObject, Group } from '@antv/g';
import { deepMix } from '@antv/util';
import { select } from '../../util';
var Columns = /** @class */ (function (_super) {
    __extends(Columns, _super);
    function Columns(_a) {
        var _this = this;
        var style = _a.style, rest = __rest(_a, ["style"]);
        _this = _super.call(this, deepMix({}, { type: 'column', style: { width: 0, height: 0 } }, __assign({ style: style }, rest))) || this;
        _this.columnsGroup = new Group({
            name: 'columns',
        });
        _this.appendChild(_this.columnsGroup);
        _this.render();
        return _this;
    }
    Columns.prototype.render = function () {
        var columns = this.attributes.columns;
        select(this.columnsGroup)
            .selectAll('column-group')
            .data(columns.flat())
            .join(function (enter) {
            return enter.append('rect').each(function (cfg) {
                select(this).styles(cfg);
            });
        }, function (update) {
            return update.each(function (cfg) {
                select(this).styles(cfg);
            });
        }, function (remove) { return remove.remove(); });
    };
    Columns.prototype.update = function (cfg) {
        this.attr(deepMix({}, this.attributes, cfg));
        var columns = cfg.columns;
        if (columns) {
            this.clear();
            this.render();
        }
    };
    Columns.prototype.clear = function () {
        this.removeChildren();
    };
    return Columns;
}(DisplayObject));
export { Columns };
//# sourceMappingURL=columns.js.map