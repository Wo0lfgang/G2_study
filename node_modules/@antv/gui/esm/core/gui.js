import { __extends } from "tslib";
import { CustomElement } from '@antv/g';
import { deepAssign } from '../util';
var GUI = /** @class */ (function (_super) {
    __extends(GUI, _super);
    function GUI(config) {
        return _super.call(this, config) || this;
    }
    GUI.prototype.connectedCallback = function () {
        this.render(this.attributes, this);
        this.bindEvents(this.attributes, this);
    };
    GUI.prototype.update = function (cfg, animate) {
        var _a;
        if (cfg === void 0) { cfg = {}; }
        this.attr(deepAssign({}, this.attributes, cfg));
        return (_a = this.render) === null || _a === void 0 ? void 0 : _a.call(this, this.attributes, this, animate);
    };
    GUI.prototype.clear = function () {
        this.removeChildren();
    };
    GUI.prototype.destroy = function () {
        this.removeAllEventListeners();
        this.removeChildren();
        this.remove();
    };
    GUI.prototype.attributeChangedCallback = function () { };
    GUI.prototype.bindEvents = function (attributes, container) { };
    return GUI;
}(CustomElement));
export { GUI };
//# sourceMappingURL=gui.js.map