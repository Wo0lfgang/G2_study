import { Text } from '@antv/g';
import type { Properties } from 'csstype';
type Font = Pick<Properties, 'fontFamily' | 'fontWeight' | 'fontStyle' | 'fontVariant'> & {
    fontSize?: number;
};
/**
 * 计算文本在画布中的宽度
 */
export declare const measureTextWidth: {
    (...args: any[]): any;
    cache: Map<any, any>;
};
/**
 * 获取文本的 ... 文本。
 * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：
 * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串
 * 2. 然后对最后这个字符串二分计算
 * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等
 * @param maxWidth 最大宽度
 * @param font 字体
 * @param dot 要替换的文本
 */
export declare const getEllipsisText: (text: any, maxWidth: number, font?: Font, dot?: string) => any;
export declare function parseLength(length: string | number, font: any): number;
export declare const getFont: (textShape: Text) => {
    fontSize: number;
    fontFamily: string;
    fontWeight: number | "inherit" | "initial" | "unset" | "bold" | "normal" | "bolder" | "lighter";
    fontStyle: "inherit" | "initial" | "unset" | "normal" | "italic" | "oblique";
    fontVariant: string | undefined;
};
/**
 * 对文本进行转换
 * @param text
 * @param pattern
 * @returns
 */
export declare function transform(text: string, pattern: 'none' | 'capitalize' | 'uppercase' | 'lowercase'): string;
export {};
