"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.percentTransform = exports.translate = exports.getTranslate = exports.hasSetRotate = exports.getTransform = void 0;
var tslib_1 = require("tslib");
var g_1 = require("@antv/g");
/** get attr value in transform */
function getTransform(el, attr) {
    var _a;
    var node = el instanceof g_1.DisplayObject ? el : el.node();
    var transform = node.computedStyleMap().get('transform');
    if (!transform || transform.value === 'unset')
        return undefined;
    return (_a = transform === null || transform === void 0 ? void 0 : transform.find(function (_a) {
        var t = _a.t;
        return t === attr;
    })) === null || _a === void 0 ? void 0 : _a.d.map(function (_a) {
        var value = _a.value;
        return value;
    });
}
exports.getTransform = getTransform;
function hasSetRotate(el) {
    return !!getTransform(el, 'rotate');
}
exports.hasSetRotate = hasSetRotate;
function getTranslate(el, x, y) {
    var node = el instanceof g_1.DisplayObject ? el : el.node();
    var _a = node.getBBox(), width = _a.width, height = _a.height;
    var _b = tslib_1.__read([x, y].map(function (v, i) {
        var _a;
        return v.includes('%')
            ? (parseFloat(((_a = v.match(/[+-]?([0-9]*[.])?[0-9]+/)) === null || _a === void 0 ? void 0 : _a[0]) || '0') / 100) * (i === 0 ? width : height)
            : v;
    }), 2), tx = _b[0], ty = _b[1];
    return [tx, ty];
}
exports.getTranslate = getTranslate;
function translate(el, x, y) {
    var node = el instanceof g_1.DisplayObject ? el : el.node();
    var _a = tslib_1.__read(getTranslate(el, x, y), 2), tx = _a[0], ty = _a[1];
    node.attr('transform', "translate(".concat(tx, ", ").concat(ty, ")"));
}
exports.translate = translate;
/**
 * transform that support translate percent value
 */
function percentTransform(el, val) {
    if (!val)
        return;
    try {
        var node_1 = el instanceof g_1.DisplayObject ? el : el.node();
        var reg = /translate\(([+-]*[\d]+[%]*),[ ]*([+-]*[\d]+[%]*)\)/g;
        var computedVal = val.replace(reg, function (match, x, y) { return "translate(".concat(getTranslate(node_1, x, y), ")"); });
        node_1.attr('transform', computedVal);
    }
    catch (e) {
        // do nothing
    }
}
exports.percentTransform = percentTransform;
//# sourceMappingURL=transform.js.map