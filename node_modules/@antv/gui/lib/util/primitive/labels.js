"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderLabels = exports.limitText = exports.applyLabelStyle = void 0;
var tslib_1 = require("tslib");
var text_1 = require("../text");
var selection_1 = require("../selection");
var defined_1 = require("../defined");
function applyLabelStyle(shape, idx, attrs, style) {
    var datum = attrs[idx].data;
    var data = attrs.map(function (d) { return d.data; });
    var labelStyle = typeof style === 'function' ? style.call(null, datum, idx, data) : style;
    shape.attr(labelStyle || {});
}
exports.applyLabelStyle = applyLabelStyle;
function limitText(textShape, maxLength) {
    var font = (0, text_1.getFont)(textShape);
    var limitLength = (0, text_1.parseLength)(maxLength, font);
    // @ts-ignore
    textShape.attr('tip', null);
    if ((0, defined_1.defined)(limitLength) && limitLength < textShape.getBounds().halfExtents[0] * 2) {
        var ellipsis = (0, text_1.getEllipsisText)(textShape.style.text || '', limitLength, font, '...');
        // @ts-ignore
        textShape.attr('tip', textShape.style.text);
        textShape.attr('text', ellipsis);
    }
}
exports.limitText = limitText;
/**
 * Display labels by default.
 */
function renderLabels(container, className, labels, cfg, defaultStyle) {
    if (defaultStyle === void 0) { defaultStyle = {}; }
    (0, selection_1.select)(container)
        .selectAll(".".concat(className))
        .data(labels, function (d) { return d.id; })
        .join(function (enter) {
        return enter
            .append('text')
            .styles(tslib_1.__assign({ className: className, fontFamily: 'sans-serif', fontSize: 12, fontWeight: 'normal' }, defaultStyle))
            .each(function (datum, idx) {
            this.attr(datum);
            limitText(this, (cfg === null || cfg === void 0 ? void 0 : cfg.maxLength) || Number.MAX_SAFE_INTEGER);
            applyLabelStyle(this, idx, labels, cfg === null || cfg === void 0 ? void 0 : cfg.style);
        });
    }, function (update) {
        return update.each(function (datum, idx) {
            this.attr(datum);
            limitText(this, (cfg === null || cfg === void 0 ? void 0 : cfg.maxLength) || Number.MAX_SAFE_INTEGER);
            applyLabelStyle(this, idx, labels, cfg === null || cfg === void 0 ? void 0 : cfg.style);
        });
    }, function (exit) { return exit.remove(); });
}
exports.renderLabels = renderLabels;
//# sourceMappingURL=labels.js.map