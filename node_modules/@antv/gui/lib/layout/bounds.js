"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bounds = void 0;
var Bounds = /** @class */ (function () {
    function Bounds(box) {
        var _a = box || {}, x1 = _a.left, y1 = _a.top, x2 = _a.right, y2 = _a.bottom;
        this.x1 = x1 !== null && x1 !== void 0 ? x1 : +Number.MAX_VALUE;
        this.x2 = x2 !== null && x2 !== void 0 ? x2 : -Number.MAX_VALUE;
        this.y1 = y1 !== null && y1 !== void 0 ? y1 : +Number.MAX_VALUE;
        this.y2 = y2 !== null && y2 !== void 0 ? y2 : -Number.MAX_VALUE;
    }
    Object.defineProperty(Bounds.prototype, "left", {
        get: function () {
            return this.x1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bounds.prototype, "top", {
        get: function () {
            return this.y1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bounds.prototype, "right", {
        get: function () {
            return this.x2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bounds.prototype, "bottom", {
        get: function () {
            return this.y2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bounds.prototype, "width", {
        get: function () {
            return this.defined('x2') && this.defined('x1') ? this.x2 - this.x1 : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bounds.prototype, "height", {
        get: function () {
            return this.defined('y2') && this.defined('y1') ? this.y2 - this.y1 : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Bounds.prototype.clear = function () {
        this.x1 = +Number.MAX_VALUE;
        this.y1 = +Number.MAX_VALUE;
        this.x2 = -Number.MAX_VALUE;
        this.y2 = -Number.MAX_VALUE;
        return this;
    };
    Bounds.prototype.empty = function () {
        return (this.x1 === +Number.MAX_VALUE &&
            this.y1 === +Number.MAX_VALUE &&
            this.x2 === -Number.MAX_VALUE &&
            this.y2 === -Number.MAX_VALUE);
    };
    Bounds.prototype.add = function (x, y) {
        if (x < this.x1)
            this.x1 = x;
        if (y < this.y1)
            this.y1 = y;
        if (x > this.x2)
            this.x2 = x;
        if (y > this.y2)
            this.y2 = y;
        return this;
    };
    Bounds.prototype.rotate = function (angle, x, y) {
        var p = this.rotatedPoints(angle, x, y);
        return this.clear().add(p[0], p[1]).add(p[2], p[3]).add(p[4], p[5]).add(p[6], p[7]);
    };
    Bounds.prototype.rotatedPoints = function (radian, x, y) {
        var _a = this, x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
        var cos = Math.cos(radian);
        var sin = Math.sin(radian);
        var cx = x - x * cos + y * sin;
        var cy = y - x * sin - y * cos;
        var points = [
            [cos * x1 - sin * y1 + cx, sin * x1 + cos * y1 + cy],
            [cos * x1 - sin * y2 + cx, sin * x1 + cos * y2 + cy],
            [cos * x2 - sin * y2 + cx, sin * x2 + cos * y2 + cy],
            [cos * x2 - sin * y1 + cx, sin * x2 + cos * y1 + cy],
        ];
        return points.flat(1);
    };
    Bounds.prototype.set = function (x1, y1, x2, y2) {
        if (x2 < x1) {
            this.x2 = x1;
            this.x1 = x2;
        }
        else {
            this.x1 = x1;
            this.x2 = x2;
        }
        if (y2 < y1) {
            this.y2 = y1;
            this.y1 = y2;
        }
        else {
            this.y1 = y1;
            this.y2 = y2;
        }
        return this;
    };
    Bounds.prototype.intersects = function (b) {
        return b && !(this.x2 < b.x1 || this.x1 > b.x2 || this.y2 < b.y1 || this.y1 > b.y2);
    };
    Bounds.prototype.defined = function (key) {
        return this[key] !== Number.MAX_VALUE && this[key] !== -Number.MAX_VALUE;
    };
    return Bounds;
}());
exports.Bounds = Bounds;
//# sourceMappingURL=bounds.js.map