"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrosshairBase = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var gui_1 = require("../../core/gui");
var util_2 = require("../../util");
var tag_1 = require("../tag");
var constant_1 = require("./constant");
var CrosshairBase = /** @class */ (function (_super) {
    tslib_1.__extends(CrosshairBase, _super);
    function CrosshairBase(options) {
        return _super.call(this, (0, util_1.deepMix)({}, CrosshairBase.defaultOptions, options)) || this;
    }
    Object.defineProperty(CrosshairBase.prototype, "localPointer", {
        /**
         * 获得 pointer 的相对坐标
         */
        get: function () {
            var _a = tslib_1.__read(this.getPosition(), 2), bx = _a[0], by = _a[1];
            var _b = tslib_1.__read(this.pointer, 2), x = _b[0], y = _b[1];
            return [x - bx, y - by];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrosshairBase.prototype, "tagCfg", {
        get: function () {
            var tagStyle = (0, util_2.subObject)(this.attributes, 'tag');
            var position = tagStyle.position, rest = tslib_1.__rest(tagStyle, ["position"]);
            return rest;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CrosshairBase.prototype, "crosshairCfg", {
        get: function () {
            var lineStyle = (0, util_2.subObject)(this.attributes, 'line');
            return tslib_1.__assign(tslib_1.__assign({}, lineStyle), { path: this.crosshairPath });
        },
        enumerable: false,
        configurable: true
    });
    CrosshairBase.prototype.render = function (attributes, container) {
        var _this = this;
        var group = (0, util_2.select)(container).maybeAppendByClassName('.crosshair-group', 'g').node();
        this.shapesGroup = group;
        this.tagShape = (0, util_2.select)(group)
            .maybeAppend('.crosshair-tag', function () { return new tag_1.Tag({ className: 'crosshair-tag', style: _this.tagCfg }); })
            .node();
        this.crosshairShape = (0, util_2.select)(group)
            .maybeAppendByClassName('.crosshair-path', 'path')
            .node()
            .attr(this.crosshairCfg);
        this.adjustLayout();
    };
    CrosshairBase.prototype.update = function (cfg) {
        if (cfg === void 0) { cfg = {}; }
        this.attr((0, util_1.deepMix)({}, this.attributes, cfg));
        this.render(this.attributes, this);
    };
    /**
     * 设置当前指针的位置
     * 1. 线条类型 调整位置即可
     * 2. circle 和 polygon 需要重新计算 path
     */
    CrosshairBase.prototype.setPointer = function (pointer) {
        this.pointer = pointer;
    };
    CrosshairBase.tag = 'crosshair-base';
    CrosshairBase.defaultOptions = {
        style: constant_1.CROSSHAIR_BASE_DEFAULT_STYLE,
    };
    return CrosshairBase;
}(gui_1.GUI));
exports.CrosshairBase = CrosshairBase;
//# sourceMappingURL=base.js.map