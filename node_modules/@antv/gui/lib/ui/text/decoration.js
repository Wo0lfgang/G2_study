"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decoration = void 0;
var tslib_1 = require("tslib");
var g_1 = require("@antv/g");
var util_1 = require("@antv/util");
var util_2 = require("../../util");
var Decoration = /** @class */ (function (_super) {
    tslib_1.__extends(Decoration, _super);
    function Decoration(options) {
        var _this = _super.call(this, (0, util_2.deepAssign)({}, Decoration.defaultOptions, options)) || this;
        _this.update({});
        return _this;
    }
    Object.defineProperty(Decoration.prototype, "decorationType", {
        /**
         * 得到规范的修饰线类型
         */
        get: function () {
            var type = this.attributes.type;
            if (!type || type === 'none' || !(0, util_1.isArray)(type))
                return 'none';
            return type.map(function (t) {
                if ((0, util_1.isArray)(t))
                    return t;
                return [t, 'solid'];
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Decoration.prototype, "doubleSpacing", {
        /**
         * 双线间隔
         */
        get: function () {
            var lineWidth = this.attributes.style.lineWidth;
            return lineWidth * 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Decoration.prototype, "hangingRate", {
        /** 上中下悬挂比例  */
        get: function () {
            var hangingRate = this.attributes.hangingRate;
            return hangingRate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Decoration.prototype, "dashedCfg", {
        get: function () {
            var lineWidth = this.attributes.style.lineWidth;
            return { lineDash: [lineWidth * 2, lineWidth] };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Decoration.prototype, "dottedCfg", {
        get: function () {
            var lineWidth = this.attributes.style.lineWidth;
            return { lineDash: [lineWidth, lineWidth] };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Decoration.prototype, "solidCfg", {
        get: function () {
            return { lineDash: [0, 0] };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Decoration.prototype, "decorationCfg", {
        get: function () {
            var _this = this;
            var style = this.attributes.style;
            var standCfg = this.decorationType;
            if (standCfg === 'none')
                return [];
            return standCfg.map(function (_a) {
                var _b = tslib_1.__read(_a, 2), type = _b[0], shape = _b[1];
                if (shape === 'wavy')
                    return tslib_1.__assign({ path: _this.getWavyPath(type) }, style);
                // 剩下的只可能是线了
                if (shape === 'double')
                    return tslib_1.__assign({ path: _this.getDoubleLinePath(type) }, style);
                var lineStyleMap = {
                    solid: _this.solidCfg,
                    dashed: _this.dashedCfg,
                    dotted: _this.dottedCfg,
                };
                return tslib_1.__assign(tslib_1.__assign({ path: _this.getLinePath(type) }, style), lineStyleMap[shape]);
            });
        },
        enumerable: false,
        configurable: true
    });
    Decoration.prototype.update = function (cfg) {
        var _this = this;
        this.attr((0, util_2.deepAssign)({}, this.attributes, cfg));
        this.clear();
        this.decorationCfg.forEach(function (cfg) {
            _this.appendChild(new g_1.Path({ style: cfg }));
        });
    };
    Decoration.prototype.clear = function () {
        this.removeChildren();
    };
    /**
     * 根据位置计算线条起始坐标
     */
    Decoration.prototype.getLinePos = function (type) {
        var _a, _b, _c;
        var _d = tslib_1.__read(this.hangingRate, 3), top = _d[0], middle = _d[1], bottom = _d[2];
        var _e = this.attributes, height = _e.height, fontSize = _e.fontSize;
        var _f = tslib_1.__read([0, 0], 2), x = _f[0], y = _f[1];
        if (type === 'overline')
            _a = tslib_1.__read([0, height * top - fontSize / 2], 2), x = _a[0], y = _a[1];
        else if (type === 'line-through')
            _b = tslib_1.__read([0, height * middle], 2), x = _b[0], y = _b[1];
        else
            _c = tslib_1.__read([0, height * bottom + fontSize / 2], 2), x = _c[0], y = _c[1];
        return [x, y];
    };
    /**
     * 根据位置创建直线路径
     */
    Decoration.prototype.getLinePath = function (type) {
        var width = this.attributes.width;
        var _a = tslib_1.__read(this.getLinePos(type), 2), x = _a[0], y = _a[1];
        return [
            ['M', x, y],
            ['L', x + width, y],
        ];
    };
    /**
     * 根据位置创建双直线路径
     */
    Decoration.prototype.getDoubleLinePath = function (type) {
        var _a, _b, _c;
        var spacing = this.doubleSpacing;
        var width = this.attributes.width;
        var _d = tslib_1.__read(this.getLinePos(type), 2), x = _d[0], y = _d[1];
        var _e = tslib_1.__read([0, 0], 2), s1 = _e[0], s2 = _e[1];
        if (type === 'line-through')
            _a = tslib_1.__read([-0.5, 0.5], 2), s1 = _a[0], s2 = _a[1];
        if (type === 'underline')
            _b = tslib_1.__read([0, 1], 2), s1 = _b[0], s2 = _b[1];
        else if (type === 'overline')
            _c = tslib_1.__read([1, 0], 2), s1 = _c[0], s2 = _c[1];
        return [
            ['M', x, y + spacing * s1],
            ['L', x + width, y + spacing * s1],
            ['M', x, y + spacing * s2],
            ['L', x + width, y + spacing * s2],
        ];
    };
    /**
     * 根据位置创建波浪线路径
     */
    Decoration.prototype.getWavyPath = function (type) {
        return [];
    };
    Decoration.tag = 'decoration';
    Decoration.defaultOptions = {
        style: {
            width: 0,
            height: 0,
            type: 'none',
            hangingRate: [0.5, 0.55, 0.5],
            // 线条默认颜色使用文字颜色
            style: {
                lineWidth: 1,
                stroke: '#000',
            },
        },
    };
    return Decoration;
}(g_1.DisplayObject));
exports.Decoration = Decoration;
//# sourceMappingURL=decoration.js.map