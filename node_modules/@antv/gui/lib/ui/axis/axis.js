"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Axis = void 0;
var tslib_1 = require("tslib");
var animation_1 = require("../../animation");
var gui_1 = require("../../core/gui");
var util_1 = require("../../util");
var constant_1 = require("./constant");
var axisGrid_1 = require("./guides/axisGrid");
var axisLabels_1 = require("./guides/axisLabels");
var axisLine_1 = require("./guides/axisLine");
var axisTicks_1 = require("./guides/axisTicks");
var axisTitle_1 = require("./guides/axisTitle");
var Axis = /** @class */ (function (_super) {
    tslib_1.__extends(Axis, _super);
    function Axis(options) {
        return _super.call(this, (0, util_1.deepAssign)({}, constant_1.AXIS_BASE_DEFAULT_CFG, options)) || this;
    }
    Axis.prototype.render = function (attributes, container, specificAnimation) {
        var _a = (0, util_1.filterTransform)(attributes), type = _a.type, data = _a.data, className = _a.class, _b = _a.dataThreshold, dataThreshold = _b === void 0 ? 100 : _b, crossSize = _a.crossSize, animate = _a.animate, title = _a.title, showTitle = _a.showTitle, titleSpacing = _a.titleSpacing, truncRange = _a.truncRange, truncShape = _a.truncShape, showLine = _a.showLine, lineExtension = _a.lineExtension, lineArrow = _a.lineArrow, lineArrowOffset = _a.lineArrowOffset, lineArrowSize = _a.lineArrowSize, showTick = _a.showTick, tickDirection = _a.tickDirection, tickLength = _a.tickLength, tickFilter = _a.tickFilter, tickFormatter = _a.tickFormatter, showLabel = _a.showLabel, labelAlign = _a.labelAlign, labelDirection = _a.labelDirection, labelSpacing = _a.labelSpacing, labelFilter = _a.labelFilter, labelFormatter = _a.labelFormatter, labelTransforms = _a.labelTransforms, showGrid = _a.showGrid, gridFilter = _a.gridFilter, gridLength = _a.gridLength, restCfg = tslib_1.__rest(_a, ["type", "data", "class", "dataThreshold", "crossSize", "animate", "title", "showTitle", "titleSpacing", "truncRange", "truncShape", "showLine", "lineExtension", "lineArrow", "lineArrowOffset", "lineArrowSize", "showTick", "tickDirection", "tickLength", "tickFilter", "tickFormatter", "showLabel", "labelAlign", "labelDirection", "labelSpacing", "labelFilter", "labelFormatter", "labelTransforms", "showGrid", "gridFilter", "gridLength"]);
        var restStyle = (function () {
            if (type === 'linear') {
                var _a = restCfg, startPos = _a.startPos, endPos = _a.endPos, rest_1 = tslib_1.__rest(_a, ["startPos", "endPos"]);
                return rest_1;
            }
            var _b = restCfg, angleRange = _b.angleRange, radius = _b.radius, center = _b.center, rest = tslib_1.__rest(_b, ["angleRange", "radius", "center"]);
            return rest;
        })();
        var _c = tslib_1.__read((0, util_1.subObjects)(restStyle, [
            'title',
            'line',
            'tick',
            'label',
            'grid',
        ]), 5), titleStyle = _c[0], lineStyle = _c[1], tickStyle = _c[2], labelStyle = _c[3], gridStyle = _c[4];
        var sampledData = (0, util_1.sampling)(data, dataThreshold).filter(function (_a) {
            var value = _a.value;
            if (truncRange && value > truncRange[0] && value < truncRange[1])
                return false;
            return true;
        });
        var finalAnimation = (0, animation_1.parseAnimationOption)(specificAnimation === undefined ? animate : specificAnimation);
        /** grid */
        var axisGridGroup = (0, util_1.select)(container).maybeAppendByClassName(constant_1.CLASS_NAMES.gridGroup, 'g');
        (0, util_1.ifShow)(showGrid, axisGridGroup, function (group) { return (0, axisGrid_1.renderGrid)(group, sampledData, attributes, gridStyle, finalAnimation); });
        /** main group */
        var axisMainGroup = (0, util_1.select)(container).maybeAppendByClassName(constant_1.CLASS_NAMES.mainGroup, 'g');
        /** line */
        var axisLineGroup = axisMainGroup.maybeAppendByClassName(constant_1.CLASS_NAMES.lineGroup, 'g');
        var lineTransitions = (0, util_1.ifShow)(showLine, axisLineGroup, function (group) {
            return (0, axisLine_1.renderAxisLine)(group, attributes, lineStyle, finalAnimation);
        }) || [];
        /** tick */
        var axisTickGroup = axisMainGroup.maybeAppendByClassName(constant_1.CLASS_NAMES.tickGroup, 'g');
        var tickTransitions = (0, util_1.ifShow)(showTick, axisTickGroup, function (group) {
            return (0, axisTicks_1.renderTicks)(group, sampledData, attributes, tickStyle, finalAnimation);
        }) || [];
        /** label */
        var axisLabelGroup = axisMainGroup.maybeAppendByClassName(constant_1.CLASS_NAMES.labelGroup, 'g');
        var labelTransitions = (0, util_1.ifShow)(showLabel, axisLabelGroup, function (group) {
            return (0, axisLabels_1.renderLabels)(group, sampledData, attributes, labelStyle, finalAnimation);
        }) || [];
        /** title */
        var axisTitleGroup = (0, util_1.select)(container).maybeAppendByClassName(constant_1.CLASS_NAMES.titleGroup, 'g');
        var titleTransition = (0, util_1.ifShow)(showTitle, axisTitleGroup, function (group) {
            return (0, axisTitle_1.renderTitle)(group, (0, util_1.select)(container), attributes, titleStyle, finalAnimation);
        });
        return tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(lineTransitions), false), tslib_1.__read(tickTransitions), false), tslib_1.__read(labelTransitions), false), [titleTransition], false).filter(function (t) { return !!t; });
    };
    return Axis;
}(gui_1.GUI));
exports.Axis = Axis;
//# sourceMappingURL=axis.js.map