"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Category = void 0;
var tslib_1 = require("tslib");
var gui_1 = require("../../core/gui");
var util_1 = require("../../util");
var title_1 = require("../title");
var items_1 = require("./category/items");
var constant_1 = require("./constant");
var Category = /** @class */ (function (_super) {
    tslib_1.__extends(Category, _super);
    function Category(config) {
        return _super.call(this, (0, util_1.deepAssign)({}, constant_1.CATEGORY_DEFAULT_OPTIONS, config)) || this;
    }
    Category.prototype.renderTitle = function (container, width, height) {
        var _a = this.attributes, showTitle = _a.showTitle, titleText = _a.titleText;
        var style = (0, util_1.subObject)(this.attributes, 'title');
        var _b = tslib_1.__read((0, util_1.styleSeparator)(style), 2), titleStyle = _b[0], groupStyle = _b[1];
        this.titleGroup = container.maybeAppendByClassName(constant_1.CLASS_NAMES.titleGroup, 'g').styles(groupStyle);
        var finalTitleStyle = tslib_1.__assign(tslib_1.__assign({ width: width, height: height }, titleStyle), { text: showTitle ? titleText : '' });
        this.title = this.titleGroup
            .maybeAppendByClassName(constant_1.CLASS_NAMES.title, function () { return new title_1.Title({ style: finalTitleStyle }); })
            .update(finalTitleStyle);
    };
    Category.prototype.renderItems = function (container, bbox) {
        var x = bbox.x, y = bbox.y, width = bbox.width, height = bbox.height;
        var _a = tslib_1.__read((0, util_1.subObjects)(this.attributes, ['title']), 2), style = _a[1];
        var _b = tslib_1.__read((0, util_1.styleSeparator)(style), 2), partialItemStyle = _b[0], groupStyle = _b[1];
        // rewrite width and height to available space
        var itemStyle = tslib_1.__assign(tslib_1.__assign({}, partialItemStyle), { width: width, height: height });
        this.itemsGroup = container
            .maybeAppendByClassName(constant_1.CLASS_NAMES.itemsGroup, 'g')
            .styles(tslib_1.__assign({ x: x, y: y }, groupStyle));
        this.items = this.itemsGroup.maybeAppendByClassName(constant_1.CLASS_NAMES.items, function () {
            return new items_1.CategoryItems({
                style: {
                    data: [],
                },
            });
        });
        this.items.node().update(itemStyle);
    };
    Category.prototype.adjustLayout = function () {
        var showTitle = this.attributes.showTitle;
        if (showTitle) {
            var _a = this.title.node().getAvailableSpace(), x = _a.x, y = _a.y;
            this.itemsGroup.node().setLocalPosition(x, y);
        }
    };
    Object.defineProperty(Category.prototype, "availableSpace", {
        get: function () {
            var _a = this.attributes, showTitle = _a.showTitle, width = _a.width, height = _a.height;
            if (!showTitle)
                return new util_1.BBox(0, 0, width, height);
            return this.title.node().getAvailableSpace();
        },
        enumerable: false,
        configurable: true
    });
    Category.prototype.getBBox = function () {
        return (0, title_1.getBBox)(this.title.node(), this.items.node());
    };
    Category.prototype.render = function (attributes, container) {
        var width = attributes.width, height = attributes.height;
        var ctn = (0, util_1.select)(container);
        this.renderTitle(ctn, width, height);
        this.renderItems(ctn, this.availableSpace);
        this.adjustLayout();
    };
    return Category;
}(gui_1.GUI));
exports.Category = Category;
//# sourceMappingURL=category.js.map