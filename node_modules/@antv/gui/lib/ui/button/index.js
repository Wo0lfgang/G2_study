"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var gui_1 = require("../../core/gui");
var util_2 = require("../../util");
var marker_1 = require("../marker");
var constant_1 = require("./constant");
var Button = /** @class */ (function (_super) {
    tslib_1.__extends(Button, _super);
    function Button(options) {
        var _this = _super.call(this, (0, util_2.deepAssign)({}, Button.defaultOptions, options)) || this;
        _this.state = 'default';
        _this.clickEvents = function () {
            var _a = _this.attributes, onClick = _a.onClick, state = _a.state;
            // 点击事件
            state !== 'disabled' && (onClick === null || onClick === void 0 ? void 0 : onClick.call(_this, _this));
        };
        _this.mouseenterEvent = function () {
            var state = _this.attributes.state;
            if (state !== 'disabled') {
                _this.state = 'active';
                _this.render(_this.attributes, _this);
            }
        };
        _this.mouseleaveEvent = function () {
            var _a = _this.attributes.state, state = _a === void 0 ? 'default' : _a;
            _this.state = state;
            _this.render(_this.attributes, _this);
        };
        return _this;
    }
    Object.defineProperty(Button.prototype, "markerSize", {
        get: function () {
            var markerSymbol = this.attributes.marker;
            var markerStyle = this.getStyle('markerStyle');
            var markerSize = !markerSymbol ? 0 : (markerStyle === null || markerStyle === void 0 ? void 0 : markerStyle.size) || 2;
            return markerSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "textAvailableWidth", {
        /* 获得文本可用宽度 */
        get: function () {
            var _a = this.attributes, marker = _a.marker, padding = _a.padding, ellipsis = _a.ellipsis, bWidth = _a.width, spacing = _a.markerSpacing;
            if (!ellipsis)
                return Infinity;
            /* 按钮总宽度 */
            var width = ((0, util_1.isUndefined)(bWidth) ? this.getStyle('buttonStyle').width : bWidth);
            if (marker)
                return width - padding * 2 - spacing - this.markerSize;
            return width - padding * 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "buttonHeight", {
        get: function () {
            var height = this.attributes.height;
            if (height)
                return height;
            return this.getStyle('buttonStyle').height;
        },
        enumerable: false,
        configurable: true
    });
    Button.prototype.getStyle = function (name) {
        var _a = this.attributes, size = _a.size, type = _a.type;
        var state = this.state;
        var mixedStyle = (0, util_1.deepMix)({}, (0, util_1.get)(constant_1.SIZE_STYLE, [size, name]), (0, util_2.getStateStyle)((0, util_1.get)(constant_1.TYPE_STYLE, [type, name]), state), (0, util_2.getStateStyle)((0, util_1.get)(this.attributes, name), state, true));
        if (state === 'disabled') {
            // 从DISABLED_STYLE中pick中pick mixedStyle里已有的style
            Object.keys(mixedStyle).forEach(function (key) {
                if (key in constant_1.DISABLED_STYLE[name]) {
                    mixedStyle[key] = (0, util_1.get)(constant_1.DISABLED_STYLE, [name, key]);
                }
            });
            Object.keys(constant_1.DISABLED_STYLE.strict[name]).forEach(function (key) {
                mixedStyle[key] = (0, util_1.get)(constant_1.DISABLED_STYLE, ['strict', name, key]);
            });
            (0, util_1.deepMix)(mixedStyle, (0, util_2.getStateStyle)((0, util_1.get)(this.attributes, name), 'disabled'));
        }
        return mixedStyle;
    };
    // @todo 处理 markerAlign='right' 的场景. 方案: left marker & right marker 处理为两个 shape, 互相不干扰
    Button.prototype.render = function (attributes, container) {
        var _a = attributes.text, text = _a === void 0 ? '' : _a, _b = attributes.padding, padding = _b === void 0 ? 0 : _b, markerSymbol = attributes.marker, _c = attributes.markerSpacing, markerSpacing = _c === void 0 ? 0 : _c;
        container.attr('cursor', this.state === 'disabled' ? 'not-allowed' : 'pointer');
        var _d = tslib_1.__read((0, util_2.normalSeriesAttr)(padding), 4), pt = _d[0], pr = _d[1], pb = _d[2], pl = _d[3];
        var height = this.buttonHeight;
        var markerStyle = this.getStyle('markerStyle');
        var markerSize = this.markerSize;
        var markerShape = (0, util_2.maybeAppend)(container, '.marker', function () { return new marker_1.Marker({ className: 'marker', style: { symbol: 'circle' } }); })
            .call(function (selection) {
            selection.node().update(tslib_1.__assign(tslib_1.__assign({}, markerStyle), { symbol: markerSymbol, x: pl + markerSize / 2, y: height / 2, size: markerSize }));
        })
            .node();
        var bounds = markerShape.getLocalBounds();
        var textStyle = this.getStyle('textStyle');
        this.textShape = (0, util_2.maybeAppend)(container, '.text', 'text')
            .attr('className', 'text')
            .styles(tslib_1.__assign(tslib_1.__assign({ x: markerSize ? bounds.max[0] + markerSpacing : pl, y: height / 2 }, textStyle), { text: text, textAlign: 'left', textBaseline: 'middle', wordWrap: true, wordWrapWidth: this.textAvailableWidth, maxLines: 1, textOverflow: '...' }))
            .node();
        var textBounds = this.textShape.getLocalBounds();
        var buttonStyle = this.getStyle('buttonStyle');
        (0, util_2.select)(container)
            .maybeAppendByClassName('.background', 'rect')
            .styles(tslib_1.__assign(tslib_1.__assign({ zIndex: -1 }, buttonStyle), { height: height, width: pl + (markerSize ? markerSize + markerSpacing : 0) + textBounds.halfExtents[0] * 2 + pr }));
    };
    /**
     * 组件的更新
     */
    Button.prototype.update = function (cfg) {
        if (cfg === void 0) { cfg = {}; }
        this.attr((0, util_1.deepMix)({}, this.attributes, cfg));
        var _a = this.attributes.state, state = _a === void 0 ? 'default' : _a;
        // 更新状态
        this.state = state;
        this.render(this.attributes, this);
    };
    /** 更新状态 (不需要走 update) */
    Button.prototype.setState = function (state) {
        this.update({ state: state });
    };
    Button.prototype.hide = function () {
        // @ts-ignore
        this.style.visibility = 'hidden';
    };
    Button.prototype.show = function () {
        // @ts-ignore
        this.style.visibility = 'visible';
    };
    Button.prototype.bindEvents = function () {
        this.addEventListener('click', this.clickEvents);
        this.addEventListener('mouseenter', this.mouseenterEvent);
        this.addEventListener('mouseleave', this.mouseleaveEvent);
    };
    /**
     * 组件类型
     */
    Button.tag = 'button';
    /**
     * 默认参数
     */
    Button.defaultOptions = {
        style: {
            cursor: 'pointer',
            padding: 10,
            size: 'middle',
            type: 'default',
            text: '',
            markerAlign: 'left',
            markerSpacing: 5,
            textStyle: {
                default: {},
                active: {},
            },
            buttonStyle: {
                default: {
                    lineWidth: 1,
                    radius: 5,
                },
                active: {},
            },
            markerStyle: {
                default: {},
            },
        },
    };
    return Button;
}(gui_1.GUI));
exports.Button = Button;
//# sourceMappingURL=index.js.map