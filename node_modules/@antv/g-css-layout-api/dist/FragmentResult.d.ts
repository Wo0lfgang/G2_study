import type { LayoutContext } from './LayoutContext';
import type { LayoutFragment } from './LayoutFragment';
import type { LayoutObject } from './LayoutObject';
export interface FragmentResultFactory {
    (options: FragmentResultOptions): FragmentResult;
}
/**
 * The web developer defined layout method can return either a FragmentResultOptions or a FragmentResult.
 */
export interface FragmentResultOptions<T = void> {
    inlineSize: number;
    blockSize: number;
    autoBlockSize: number;
    childFragments: LayoutFragment[];
    data: T;
}
export declare class FragmentResult<T = void> {
    protected readonly _layoutContext: LayoutContext;
    protected readonly _node: LayoutObject;
    protected readonly options: FragmentResultOptions<T>;
    private layoutContext;
    readonly inlineSize: number;
    readonly blockSize: number;
    private node;
    childFragments: LayoutFragment[];
    data: T;
    constructor(_layoutContext: LayoutContext, _node: LayoutObject, options: FragmentResultOptions<T>);
}
//# sourceMappingURL=FragmentResult.d.ts.map