import type { FragmentResultFactory } from './FragmentResult';
import type { LayoutChildrenFactory } from './LayoutChildren';
import type { LayoutFragmentFactory } from './LayoutFragment';
import type { LayoutWorkTask } from './LayoutWorkTask';
import type { ContextId, LayoutTaskType } from './types';
export interface LayoutContextFactory {
    (options: {
        mode: LayoutTaskType;
    }): LayoutContext;
}
export interface LayoutContextOptions {
    mode: LayoutTaskType;
    layoutChildrenFactory: LayoutChildrenFactory;
    fragmentResultFactory: FragmentResultFactory;
    layoutFragmentFactory: LayoutFragmentFactory;
}
/**
 * 每次layout 有单独的 context
 */
export declare class LayoutContext {
    protected readonly options: LayoutContextOptions;
    contextId: ContextId;
    workQueue: LayoutWorkTask[];
    mode: LayoutTaskType;
    layoutChildrenFactory: LayoutChildrenFactory;
    fragmentResultFactory: FragmentResultFactory;
    layoutFragmentFactory: LayoutFragmentFactory;
    constructor(options: LayoutContextOptions);
    appendWorkTask(work: LayoutWorkTask): void;
    clearWorkQueue(): void;
}
//# sourceMappingURL=LayoutContext.d.ts.map