import type { FragmentResult, FragmentResultOptions } from './FragmentResult';
import type { LayoutChildren } from './LayoutChildren';
import type { LayoutEdges } from './LayoutEdges';
import type { IntrinsicSizes, LayoutConstraints, LayoutOptions } from './types';
export declare abstract class AbstractLayoutDefinition {
    static inputProperties: string[];
    static childrenInputProperties: string[];
    static layoutOptions: LayoutOptions;
    abstract intrinsicSizes(children: LayoutChildren[], edges: LayoutEdges, styleMap: Map<string, any>): Promise<IntrinsicSizes>;
    abstract layout(children: LayoutChildren[], edges: LayoutEdges, constraints: LayoutConstraints, styleMap: Map<string, any>): Promise<FragmentResultOptions | FragmentResult>;
}
/**
 * internal use
 */
export type LayoutDefinitionCtor = {
    new (): AbstractLayoutDefinition;
    inputProperties: string[];
    childrenInputProperties: string[];
    layoutOptions: LayoutOptions;
};
//# sourceMappingURL=LayoutDefinition.d.ts.map