"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverlapHide = void 0;
const bounds_1 = require("../utils/bounds");
/**
 * Hide the label when overlap.
 */
const OverlapHide = (options) => {
    const { priority } = options;
    return (labels, coordinate) => {
        const displayLabels = [];
        // When overlap, will hide the next label.
        if (priority)
            labels.sort(priority);
        labels.forEach((l) => {
            l.attr('visibility', 'visible');
            const b1 = l.getLocalBounds();
            const overlaping = displayLabels.some((dl) => (0, bounds_1.isOverlap)((0, bounds_1.parseAABB)(b1), (0, bounds_1.parseAABB)(dl.getLocalBounds())));
            if (overlaping)
                l.attr('visibility', 'hidden');
            else
                displayLabels.push(l);
        });
        return labels;
    };
};
exports.OverlapHide = OverlapHide;
//# sourceMappingURL=overlapHide.js.map