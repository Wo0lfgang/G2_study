import { RendererPlugin, Canvas as GCanvas } from '@antv/g';
import { Renderer as CanvasRenderer } from '@antv/g-canvas';
import { G2Context } from '../runtime';
import { ViewComposition } from '../spec';
import { G2ViewTree } from '../runtime/types/options';
import { Node } from './node';
import { NodePropertyDescriptor } from './props';
import { ValueAttribute, Concrete, ArrayAttribute, ObjectAttribute } from './types';
import { Mark } from './mark';
import { Composition, View } from './composition';
export declare const SPEC_EXTERNAL_KEYS: string[];
export declare function removeContainer(container: HTMLElement): void;
export declare function optionsOf(node: Node): Record<string, any>;
export type ChartOptions = ViewComposition & {
    container?: string | HTMLElement;
    canvas?: GCanvas;
    width?: number;
    height?: number;
    autoFit?: boolean;
    renderer?: CanvasRenderer;
    plugins?: RendererPlugin[];
};
type ChartProps = Concrete<ViewComposition>;
export interface Chart extends Composition, Mark {
    render(): void;
    node(): HTMLElement;
    data: ValueAttribute<ChartProps['data'], Chart>;
    width: ValueAttribute<ChartProps['width'], Chart>;
    height: ValueAttribute<ChartProps['height'], Chart>;
    coordinate: ValueAttribute<ChartProps['coordinate'], Chart>;
    interaction: ObjectAttribute<ChartProps['interaction'], Chart>;
    key: ValueAttribute<ChartProps['key'], Chart>;
    transform: ArrayAttribute<ChartProps['transform'], Chart>;
    theme: ObjectAttribute<ChartProps['theme'], Chart>;
    title: ValueAttribute<ChartProps['title'], Chart>;
    scale: ObjectAttribute<ChartOptions['scale'], Chart>;
    axis: ObjectAttribute<ChartOptions['axis'], Chart>;
    legend: ObjectAttribute<ChartOptions['legend'], Chart>;
    style: ObjectAttribute<ChartOptions['style'], Chart>;
}
export declare const props: NodePropertyDescriptor[];
export declare class Chart extends View<ChartOptions> {
    private _container;
    private _context;
    private _emitter;
    private _options;
    constructor(options?: ChartOptions);
    /**
     * @overload
     * @returns {G2ViewTree}
     */
    options(): G2ViewTree;
    /**
     * @overload
     * @param {G2ViewTree} options
     * @returns {Chart}
     */
    options(options: G2ViewTree): Chart;
    getContainer(): HTMLElement;
    getContext(): G2Context;
    on(event: string, callback: (...args: any[]) => any, once?: boolean): this;
    once(event: string, callback: (...args: any[]) => any): this;
    emit(event: string, ...args: any[]): this;
    off(event?: string, callback?: (...args: any[]) => any): this;
    destroy(): void;
    clear(): void;
    forceFit(): void;
    changeSize(adjustedWidth: number, adjustedHeight: number): Promise<Chart>;
    private onResize;
    private bindAutoFit;
    private unbindAutoFit;
}
export {};
