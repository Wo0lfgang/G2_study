import { RepeatMatrixComposition } from '../../spec';
import { ValueAttribute, Concrete, ArrayAttribute, ObjectAttribute } from '../types';
import { Mark } from '../mark';
import { Composition, CompositionNode } from './index';
type RepeatMatrixSpec = Concrete<RepeatMatrixComposition>;
export interface RepeatMatrix extends Composition, Mark {
    data: ValueAttribute<RepeatMatrixSpec['data'], RepeatMatrix>;
    transform: ArrayAttribute<RepeatMatrixSpec['transform'], RepeatMatrix>;
    encode: ObjectAttribute<RepeatMatrixSpec['encode'], RepeatMatrix>;
    scale: ObjectAttribute<RepeatMatrixSpec['scale'], RepeatMatrix>;
    legend: ObjectAttribute<RepeatMatrixSpec['legend'], RepeatMatrix>;
    axis: ObjectAttribute<RepeatMatrixSpec['axis'], RepeatMatrix>;
}
export declare class RepeatMatrix extends CompositionNode<RepeatMatrixComposition> {
    constructor();
}
export {};
