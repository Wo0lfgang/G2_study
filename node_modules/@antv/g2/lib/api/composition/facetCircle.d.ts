import { FacetCircleComposition } from '../../spec';
import { ValueAttribute, Concrete, ArrayAttribute, ObjectAttribute } from '../types';
import { Mark } from '../mark';
import { Composition, CompositionNode } from './index';
type FacetCircleSpec = Concrete<FacetCircleComposition>;
export interface FacetCircle extends Composition, Mark {
    data: ValueAttribute<FacetCircleSpec['data'], FacetCircle>;
    transform: ArrayAttribute<FacetCircleSpec['transform'], FacetCircle>;
    encode: ObjectAttribute<FacetCircleSpec['encode'], FacetCircle>;
    scale: ObjectAttribute<FacetCircleSpec['scale'], FacetCircle>;
    legend: ObjectAttribute<FacetCircleSpec['legend'], FacetCircle>;
    axis: ObjectAttribute<FacetCircleSpec['axis'], FacetCircle>;
}
export declare class FacetCircle extends CompositionNode<FacetCircleComposition> {
    constructor();
}
export {};
