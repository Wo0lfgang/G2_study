"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordCloud = exports.Tree = exports.ForceGraph = exports.Pack = exports.Boxplot = exports.Treemap = exports.Sankey = exports.Shape = exports.Connector = exports.RangeY = exports.RangeX = exports.Range = exports.LineY = exports.LineX = exports.Box = exports.Text = exports.Image = exports.Polygon = exports.Link = exports.Vector = exports.Cell = exports.Line = exports.Area = exports.Point = exports.Rect = exports.Interval = exports.HOMMark = exports.props = void 0;
const props_1 = require("../props");
const base_1 = require("./base");
exports.props = [
    { name: 'encode', type: 'object' },
    { name: 'scale', type: 'object' },
    { name: 'data', type: 'value' },
    { name: 'transform', type: 'array' },
    { name: 'style', type: 'object' },
    { name: 'animate', type: 'object' },
    { name: 'coordinate', type: 'object' },
    { name: 'interaction', type: 'object' },
    { name: 'label', type: 'array', key: 'labels' },
    { name: 'axis', type: 'object' },
    { name: 'legend', type: 'object' },
    { name: 'slider', type: 'object' },
    { name: 'scrollbar', type: 'object' },
    { name: 'state', type: 'object' },
    { name: 'tooltip', type: 'mix' },
];
let HOMMark = class HOMMark extends base_1.MarkNode {
    constructor() {
        super({});
    }
};
HOMMark = __decorate([
    (0, props_1.defineProps)(exports.props)
], HOMMark);
exports.HOMMark = HOMMark;
let Interval = class Interval extends base_1.MarkNode {
    constructor() {
        super({}, 'interval');
    }
};
Interval = __decorate([
    (0, props_1.defineProps)(exports.props)
], Interval);
exports.Interval = Interval;
let Rect = class Rect extends base_1.MarkNode {
    constructor() {
        super({}, 'rect');
    }
};
Rect = __decorate([
    (0, props_1.defineProps)(exports.props)
], Rect);
exports.Rect = Rect;
let Point = class Point extends base_1.MarkNode {
    constructor() {
        super({}, 'point');
    }
};
Point = __decorate([
    (0, props_1.defineProps)(exports.props)
], Point);
exports.Point = Point;
let Area = class Area extends base_1.MarkNode {
    constructor() {
        super({}, 'area');
    }
};
Area = __decorate([
    (0, props_1.defineProps)(exports.props)
], Area);
exports.Area = Area;
let Line = class Line extends base_1.MarkNode {
    constructor() {
        super({}, 'line');
    }
};
Line = __decorate([
    (0, props_1.defineProps)(exports.props)
], Line);
exports.Line = Line;
let Cell = class Cell extends base_1.MarkNode {
    constructor() {
        super({}, 'cell');
    }
};
Cell = __decorate([
    (0, props_1.defineProps)(exports.props)
], Cell);
exports.Cell = Cell;
let Vector = class Vector extends base_1.MarkNode {
    constructor() {
        super({}, 'vector');
    }
};
Vector = __decorate([
    (0, props_1.defineProps)(exports.props)
], Vector);
exports.Vector = Vector;
let Link = class Link extends base_1.MarkNode {
    constructor() {
        super({}, 'link');
    }
};
Link = __decorate([
    (0, props_1.defineProps)(exports.props)
], Link);
exports.Link = Link;
let Polygon = class Polygon extends base_1.MarkNode {
    constructor() {
        super({}, 'polygon');
    }
};
Polygon = __decorate([
    (0, props_1.defineProps)(exports.props)
], Polygon);
exports.Polygon = Polygon;
let Image = class Image extends base_1.MarkNode {
    constructor() {
        super({}, 'image');
    }
};
Image = __decorate([
    (0, props_1.defineProps)(exports.props)
], Image);
exports.Image = Image;
let Text = class Text extends base_1.MarkNode {
    constructor() {
        super({}, 'text');
    }
};
Text = __decorate([
    (0, props_1.defineProps)(exports.props)
], Text);
exports.Text = Text;
let Box = class Box extends base_1.MarkNode {
    constructor() {
        super({}, 'box');
    }
};
Box = __decorate([
    (0, props_1.defineProps)(exports.props)
], Box);
exports.Box = Box;
let LineX = class LineX extends base_1.MarkNode {
    constructor() {
        super({}, 'lineX');
    }
};
LineX = __decorate([
    (0, props_1.defineProps)(exports.props)
], LineX);
exports.LineX = LineX;
let LineY = class LineY extends base_1.MarkNode {
    constructor() {
        super({}, 'lineY');
    }
};
LineY = __decorate([
    (0, props_1.defineProps)(exports.props)
], LineY);
exports.LineY = LineY;
let Range = class Range extends base_1.MarkNode {
    constructor() {
        super({}, 'range');
    }
};
Range = __decorate([
    (0, props_1.defineProps)(exports.props)
], Range);
exports.Range = Range;
let RangeX = class RangeX extends base_1.MarkNode {
    constructor() {
        super({}, 'rangeX');
    }
};
RangeX = __decorate([
    (0, props_1.defineProps)(exports.props)
], RangeX);
exports.RangeX = RangeX;
let RangeY = class RangeY extends base_1.MarkNode {
    constructor() {
        super({}, 'rangeY');
    }
};
RangeY = __decorate([
    (0, props_1.defineProps)(exports.props)
], RangeY);
exports.RangeY = RangeY;
let Connector = class Connector extends base_1.MarkNode {
    constructor() {
        super({}, 'connector');
    }
};
Connector = __decorate([
    (0, props_1.defineProps)(exports.props)
], Connector);
exports.Connector = Connector;
let Shape = class Shape extends base_1.MarkNode {
    constructor() {
        super({}, 'shape');
    }
};
Shape = __decorate([
    (0, props_1.defineProps)(exports.props)
], Shape);
exports.Shape = Shape;
let Sankey = class Sankey extends base_1.MarkNode {
    constructor() {
        super({}, 'sankey');
    }
};
Sankey = __decorate([
    (0, props_1.defineProps)([...exports.props, { name: 'layout', type: 'value' }])
], Sankey);
exports.Sankey = Sankey;
let Treemap = class Treemap extends base_1.MarkNode {
    constructor() {
        super({}, 'treemap');
    }
};
Treemap = __decorate([
    (0, props_1.defineProps)([...exports.props, { name: 'layout', type: 'value' }])
], Treemap);
exports.Treemap = Treemap;
let Boxplot = class Boxplot extends base_1.MarkNode {
    constructor() {
        super({}, 'boxplot');
    }
};
Boxplot = __decorate([
    (0, props_1.defineProps)(exports.props)
], Boxplot);
exports.Boxplot = Boxplot;
let Pack = class Pack extends base_1.MarkNode {
    constructor() {
        super({}, 'pack');
    }
};
Pack = __decorate([
    (0, props_1.defineProps)([...exports.props, { name: 'layout', type: 'value' }])
], Pack);
exports.Pack = Pack;
let ForceGraph = class ForceGraph extends base_1.MarkNode {
    constructor() {
        super({}, 'forceGraph');
    }
};
ForceGraph = __decorate([
    (0, props_1.defineProps)([...exports.props, { name: 'layout', type: 'value' }])
], ForceGraph);
exports.ForceGraph = ForceGraph;
let Tree = class Tree extends base_1.MarkNode {
    constructor() {
        super({}, 'tree');
    }
};
Tree = __decorate([
    (0, props_1.defineProps)([...exports.props, { name: 'layout', type: 'value' }])
], Tree);
exports.Tree = Tree;
let WordCloud = class WordCloud extends base_1.MarkNode {
    constructor() {
        super({}, 'wordCloud');
    }
};
WordCloud = __decorate([
    (0, props_1.defineProps)([...exports.props, { name: 'layout', type: 'object' }])
], WordCloud);
exports.WordCloud = WordCloud;
//# sourceMappingURL=mark.js.map