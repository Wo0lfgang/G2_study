"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Color = void 0;
const g_1 = require("@antv/g");
const coordinate_1 = require("../../utils/coordinate");
const selection_1 = require("../../utils/selection");
const utils_1 = require("../utils");
const Symbols = __importStar(require("./symbol"));
function getRadius(mode, points, value, coordinate) {
    if (points.length === 1)
        return undefined;
    const { size } = value;
    if (mode === 'fixed')
        return size;
    if (mode === 'normal' || (0, coordinate_1.isFisheye)(coordinate)) {
        const [[x0, y0], [x2, y2]] = points;
        const a = Math.abs((x2 - x0) / 2);
        const b = Math.abs((y2 - y0) / 2);
        return Math.max(0, (a + b) / 2);
    }
    return size;
}
function getOrigin(points) {
    if (points.length === 1)
        return points[0];
    const [[x0, y0], [x2, y2]] = points;
    return [(x0 + x2) / 2, (y0 + y2) / 2];
}
/**
 * Render point in different coordinate.
 */
const Color = (options) => {
    // Render border only when colorAttribute is stroke.
    const { colorAttribute, symbol, mode = 'auto' } = options, style = __rest(options, ["colorAttribute", "symbol", "mode"]);
    const path = Symbols[symbol] || Symbols.point;
    return (points, value, coordinate, theme) => {
        const { mark, shape, defaultShape } = value;
        const _a = (0, utils_1.getShapeTheme)(theme, mark, shape, defaultShape), { defaultColor, lineWidth } = _a, defaults = __rest(_a, ["defaultColor", "lineWidth"]);
        const finalLineWidth = style.stroke ? lineWidth || 1 : lineWidth;
        const { color = defaultColor, transform, opacity } = value;
        const [cx, cy] = getOrigin(points);
        const r = getRadius(mode, points, value, coordinate);
        const finalRadius = r || style.r || defaults.r;
        return (0, selection_1.select)(new g_1.Path())
            .call(utils_1.applyStyle, defaults)
            .style('d', path(cx, cy, finalRadius))
            .style('lineWidth', finalLineWidth)
            .style('transform', transform)
            .style('stroke', color)
            .style((0, utils_1.toOpacityKey)(options), opacity)
            .style(colorAttribute, color)
            .call(utils_1.applyStyle, style)
            .node();
    };
};
exports.Color = Color;
exports.Color.props = {
    defaultEnterAnimation: 'fadeIn',
    defaultUpdateAnimation: 'morphing',
    defaultExitAnimation: 'fadeOut',
};
//# sourceMappingURL=color.js.map