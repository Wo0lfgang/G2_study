import { FacetRectComposition } from '../../spec';
import { ValueAttribute, Concrete, ArrayAttribute, ObjectAttribute } from '../types';
import { Mark } from '../mark';
import { Composition, CompositionNode } from './index';
type FacetRectSpec = Concrete<FacetRectComposition>;
export interface FacetRect extends Composition, Mark {
    data: ValueAttribute<FacetRectSpec['data'], FacetRect>;
    transform: ArrayAttribute<FacetRectSpec['transform'], FacetRect>;
    encode: ObjectAttribute<FacetRectSpec['encode'], FacetRect>;
    scale: ObjectAttribute<FacetRectSpec['scale'], FacetRect>;
    legend: ObjectAttribute<FacetRectSpec['legend'], FacetRect>;
    axis: ObjectAttribute<FacetRectSpec['axis'], FacetRect>;
}
export declare class FacetRect extends CompositionNode<FacetRectComposition> {
    constructor();
}
export {};
