import { ViewComposition } from '../../spec';
import { ValueAttribute, ObjectAttribute, ArrayAttribute, Concrete } from '../types';
import { Mark } from '../mark';
import { CompositionNode } from './base';
type ViewSpec = Concrete<ViewComposition>;
export interface View extends Mark {
    data: ValueAttribute<ViewSpec['data'], View>;
    coordinate: ArrayAttribute<ViewSpec['coordinate'], View>;
    interaction: ObjectAttribute<ViewSpec['interaction'], View>;
    theme: ObjectAttribute<ViewSpec['theme'], View>;
    style: ObjectAttribute<ViewSpec['style'], View>;
    scale: ObjectAttribute<ViewSpec['scale'], View>;
    axis: ObjectAttribute<ViewSpec['axis'], View>;
    legend: ObjectAttribute<ViewSpec['legend'], View>;
}
export declare class View<ViewProps extends ViewComposition = ViewComposition> extends CompositionNode<ViewProps> {
    constructor(options?: {}, type?: string);
}
export {};
