var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { defineProps } from '../props';
import { MarkNode } from './base';
export const props = [
    { name: 'encode', type: 'object' },
    { name: 'scale', type: 'object' },
    { name: 'data', type: 'value' },
    { name: 'transform', type: 'array' },
    { name: 'style', type: 'object' },
    { name: 'animate', type: 'object' },
    { name: 'coordinate', type: 'object' },
    { name: 'interaction', type: 'object' },
    { name: 'label', type: 'array', key: 'labels' },
    { name: 'axis', type: 'object' },
    { name: 'legend', type: 'object' },
    { name: 'slider', type: 'object' },
    { name: 'scrollbar', type: 'object' },
    { name: 'state', type: 'object' },
    { name: 'tooltip', type: 'mix' },
];
let HOMMark = class HOMMark extends MarkNode {
    constructor() {
        super({});
    }
};
HOMMark = __decorate([
    defineProps(props)
], HOMMark);
export { HOMMark };
let Interval = class Interval extends MarkNode {
    constructor() {
        super({}, 'interval');
    }
};
Interval = __decorate([
    defineProps(props)
], Interval);
export { Interval };
let Rect = class Rect extends MarkNode {
    constructor() {
        super({}, 'rect');
    }
};
Rect = __decorate([
    defineProps(props)
], Rect);
export { Rect };
let Point = class Point extends MarkNode {
    constructor() {
        super({}, 'point');
    }
};
Point = __decorate([
    defineProps(props)
], Point);
export { Point };
let Area = class Area extends MarkNode {
    constructor() {
        super({}, 'area');
    }
};
Area = __decorate([
    defineProps(props)
], Area);
export { Area };
let Line = class Line extends MarkNode {
    constructor() {
        super({}, 'line');
    }
};
Line = __decorate([
    defineProps(props)
], Line);
export { Line };
let Cell = class Cell extends MarkNode {
    constructor() {
        super({}, 'cell');
    }
};
Cell = __decorate([
    defineProps(props)
], Cell);
export { Cell };
let Vector = class Vector extends MarkNode {
    constructor() {
        super({}, 'vector');
    }
};
Vector = __decorate([
    defineProps(props)
], Vector);
export { Vector };
let Link = class Link extends MarkNode {
    constructor() {
        super({}, 'link');
    }
};
Link = __decorate([
    defineProps(props)
], Link);
export { Link };
let Polygon = class Polygon extends MarkNode {
    constructor() {
        super({}, 'polygon');
    }
};
Polygon = __decorate([
    defineProps(props)
], Polygon);
export { Polygon };
let Image = class Image extends MarkNode {
    constructor() {
        super({}, 'image');
    }
};
Image = __decorate([
    defineProps(props)
], Image);
export { Image };
let Text = class Text extends MarkNode {
    constructor() {
        super({}, 'text');
    }
};
Text = __decorate([
    defineProps(props)
], Text);
export { Text };
let Box = class Box extends MarkNode {
    constructor() {
        super({}, 'box');
    }
};
Box = __decorate([
    defineProps(props)
], Box);
export { Box };
let LineX = class LineX extends MarkNode {
    constructor() {
        super({}, 'lineX');
    }
};
LineX = __decorate([
    defineProps(props)
], LineX);
export { LineX };
let LineY = class LineY extends MarkNode {
    constructor() {
        super({}, 'lineY');
    }
};
LineY = __decorate([
    defineProps(props)
], LineY);
export { LineY };
let Range = class Range extends MarkNode {
    constructor() {
        super({}, 'range');
    }
};
Range = __decorate([
    defineProps(props)
], Range);
export { Range };
let RangeX = class RangeX extends MarkNode {
    constructor() {
        super({}, 'rangeX');
    }
};
RangeX = __decorate([
    defineProps(props)
], RangeX);
export { RangeX };
let RangeY = class RangeY extends MarkNode {
    constructor() {
        super({}, 'rangeY');
    }
};
RangeY = __decorate([
    defineProps(props)
], RangeY);
export { RangeY };
let Connector = class Connector extends MarkNode {
    constructor() {
        super({}, 'connector');
    }
};
Connector = __decorate([
    defineProps(props)
], Connector);
export { Connector };
let Shape = class Shape extends MarkNode {
    constructor() {
        super({}, 'shape');
    }
};
Shape = __decorate([
    defineProps(props)
], Shape);
export { Shape };
let Sankey = class Sankey extends MarkNode {
    constructor() {
        super({}, 'sankey');
    }
};
Sankey = __decorate([
    defineProps([...props, { name: 'layout', type: 'value' }])
], Sankey);
export { Sankey };
let Treemap = class Treemap extends MarkNode {
    constructor() {
        super({}, 'treemap');
    }
};
Treemap = __decorate([
    defineProps([...props, { name: 'layout', type: 'value' }])
], Treemap);
export { Treemap };
let Boxplot = class Boxplot extends MarkNode {
    constructor() {
        super({}, 'boxplot');
    }
};
Boxplot = __decorate([
    defineProps(props)
], Boxplot);
export { Boxplot };
let Pack = class Pack extends MarkNode {
    constructor() {
        super({}, 'pack');
    }
};
Pack = __decorate([
    defineProps([...props, { name: 'layout', type: 'value' }])
], Pack);
export { Pack };
let ForceGraph = class ForceGraph extends MarkNode {
    constructor() {
        super({}, 'forceGraph');
    }
};
ForceGraph = __decorate([
    defineProps([...props, { name: 'layout', type: 'value' }])
], ForceGraph);
export { ForceGraph };
let Tree = class Tree extends MarkNode {
    constructor() {
        super({}, 'tree');
    }
};
Tree = __decorate([
    defineProps([...props, { name: 'layout', type: 'value' }])
], Tree);
export { Tree };
let WordCloud = class WordCloud extends MarkNode {
    constructor() {
        super({}, 'wordCloud');
    }
};
WordCloud = __decorate([
    defineProps([...props, { name: 'layout', type: 'object' }])
], WordCloud);
export { WordCloud };
//# sourceMappingURL=mark.js.map