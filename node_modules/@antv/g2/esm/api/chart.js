var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Canvas as GCanvas } from '@antv/g';
import { Renderer as CanvasRenderer } from '@antv/g-canvas';
import { Plugin as DragAndDropPlugin } from '@antv/g-plugin-dragndrop';
import { debounce, deepMix, omit } from '@antv/util';
import EventEmitter from '@antv/event-emitter';
import { render, destroy } from '../runtime';
import { getChartSize } from '../utils/size';
import { CHART_LIFE_CIRCLE } from '../utils/event';
import { defineProps, nodeProps, containerProps, } from './props';
import { mark } from './mark';
import { composition, View } from './composition';
import { library } from './library';
export const SPEC_EXTERNAL_KEYS = ['container', 'renderer'];
function normalizeContainer(container) {
    if (container === undefined)
        return document.createElement('div');
    if (typeof container === 'string') {
        const node = document.getElementById(container);
        return node;
    }
    return container;
}
export function removeContainer(container) {
    const parent = container.parentNode;
    if (parent) {
        parent.removeChild(container);
    }
}
function normalizeRoot(node) {
    if (node.type !== null)
        return node;
    const root = node.children[node.children.length - 1];
    root.attr('width', node.attr('width'));
    root.attr('height', node.attr('height'));
    root.attr('paddingLeft', node.attr('paddingLeft'));
    root.attr('paddingTop', node.attr('paddingTop'));
    root.attr('paddingBottom', node.attr('paddingBottom'));
    root.attr('paddingRight', node.attr('paddingRight'));
    root.attr('insetLeft', node.attr('insetLeft'));
    root.attr('insetRight', node.attr('insetRight'));
    root.attr('insetBottom', node.attr('insetBottom'));
    root.attr('insetTop', node.attr('insetTop'));
    root.attr('marginLeft', node.attr('marginLeft'));
    root.attr('marginBottom', node.attr('marginBottom'));
    root.attr('marginTop', node.attr('marginTop'));
    root.attr('marginRight', node.attr('marginRight'));
    root.attr('autoFit', node.attr('autoFit'));
    root.attr('padding', node.attr('padding'));
    root.attr('margin', node.attr('margin'));
    root.attr('inset', node.attr('inset'));
    return root;
}
function valueOf(node) {
    return Object.assign(Object.assign({}, node.value), { type: node.type });
}
function Canvas(container, width, height, renderer = new CanvasRenderer(), plugins = []) {
    // DragAndDropPlugin is for interaction.
    // It is OK to register more than one time, G will handle this.
    plugins.push(new DragAndDropPlugin());
    plugins.forEach((d) => renderer.registerPlugin(d));
    return new GCanvas({
        container,
        width,
        height,
        renderer,
    });
}
export function optionsOf(node) {
    const root = normalizeRoot(node);
    const discovered = [root];
    const nodeValue = new Map();
    nodeValue.set(root, valueOf(root));
    while (discovered.length) {
        const node = discovered.pop();
        const value = nodeValue.get(node);
        for (const child of node.children) {
            const childValue = valueOf(child);
            const { children = [] } = value;
            children.push(childValue);
            discovered.push(child);
            nodeValue.set(child, childValue);
            value.children = children;
        }
    }
    return nodeValue.get(root);
}
export const props = [
    { name: 'data', type: 'value' },
    { name: 'width', type: 'value' },
    { name: 'height', type: 'value' },
    { name: 'coordinate', type: 'value' },
    { name: 'interaction', type: 'object' },
    { name: 'theme', type: 'object' },
    { name: 'title', type: 'value' },
    { name: 'key', type: 'value' },
    { name: 'transform', type: 'array' },
    { name: 'theme', type: 'object' },
    { name: 'scale', type: 'object' },
    { name: 'axis', type: 'object' },
    { name: 'legend', type: 'object' },
    { name: 'style', type: 'object' },
    ...nodeProps(mark),
    ...containerProps(composition),
];
let Chart = class Chart extends View {
    constructor(options = {}) {
        const { container, canvas } = options, rest = __rest(options, ["container", "canvas"]);
        super(rest, 'view');
        this.onResize = debounce(() => {
            this.forceFit();
        }, 300);
        this._container = normalizeContainer(container);
        this._emitter = new EventEmitter();
        this._context = { library, emitter: this._emitter, canvas };
        this.bindAutoFit();
    }
    render() {
        if (!this._context.canvas) {
            // Init width and height.
            const { width = 640, height = 480, renderer, plugins, autoFit, } = this.options();
            const { width: adjustedWidth, height: adjustedHeight } = getChartSize(this._container, autoFit, width, height);
            this.width(adjustedWidth);
            this.height(adjustedHeight);
            // Create canvas if it does not exist.
            this._context.canvas = Canvas(this._container, width, height, renderer, plugins);
        }
        return new Promise((resolve) => {
            render(this.options(), this._context, () => resolve(this));
        });
    }
    /**
     * @overload
     * @param {G2ViewTree} [options]
     * @returns {Chart|G2ViewTree}
     */
    options(options) {
        if (arguments.length === 0) {
            return this._options || optionsOf(this);
        }
        this._options = deepMix(this._options || {}, omit(options, SPEC_EXTERNAL_KEYS));
        return this;
    }
    getContainer() {
        return this._container;
    }
    getContext() {
        return this._context;
    }
    on(event, callback, once) {
        this._emitter.on(event, callback, once);
        return this;
    }
    once(event, callback) {
        this._emitter.once(event, callback);
        return this;
    }
    emit(event, ...args) {
        this._emitter.emit(event, ...args);
        return this;
    }
    off(event, callback) {
        this._emitter.off(event, callback);
        return this;
    }
    destroy() {
        const options = this.options();
        this.emit(CHART_LIFE_CIRCLE.BEFORE_DESTROY);
        this.unbindAutoFit();
        destroy(options, this._context);
        // Remove the container.
        removeContainer(this._container);
        this.emit(CHART_LIFE_CIRCLE.AFTER_DESTROY);
    }
    clear() {
        const options = this.options();
        this.emit(CHART_LIFE_CIRCLE.BEFORE_CLEAR);
        destroy(options, this._context);
        this.emit(CHART_LIFE_CIRCLE.AFTER_CLEAR);
    }
    forceFit() {
        const { width, height, autoFit } = this.options();
        const { width: adjustedWidth, height: adjustedHeight } = getChartSize(this._container, autoFit, width, height);
        if (adjustedHeight && adjustedWidth) {
            this.changeSize(adjustedWidth, adjustedHeight);
        }
    }
    changeSize(adjustedWidth, adjustedHeight) {
        const { width, height, on } = this.options();
        if (width === adjustedWidth && height === adjustedHeight) {
            return Promise.resolve(this);
        }
        this.emit(CHART_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);
        this.width(adjustedWidth);
        this.height(adjustedHeight);
        const finished = this.render();
        finished.then(() => {
            this.emit(CHART_LIFE_CIRCLE.AFTER_CHANGE_SIZE);
        });
        return finished;
    }
    bindAutoFit() {
        const options = this.options();
        const { autoFit } = options;
        if (autoFit) {
            window.addEventListener('resize', this.onResize);
        }
    }
    unbindAutoFit() {
        const options = this.options();
        const { autoFit } = options;
        if (autoFit) {
            window.removeEventListener('resize', this.onResize);
        }
    }
};
Chart = __decorate([
    defineProps(props)
], Chart);
export { Chart };
//# sourceMappingURL=chart.js.map