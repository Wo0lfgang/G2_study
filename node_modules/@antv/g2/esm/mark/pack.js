var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { deepMix, isArray } from '@antv/util';
import { stratify, hierarchy, pack as packLayout } from 'd3-hierarchy';
import { subObject } from '../utils/helper';
import { getBBoxSize } from '../utils/size';
const dataTransform = (data, layout, encode) => {
    const { value } = encode;
    const root = isArray(data)
        ? stratify().path(layout.path)(data)
        : hierarchy(data);
    value ? root.sum((d) => d[value]).sort(layout.sort) : root.count();
    // @ts-ignore
    packLayout().size(layout.size).padding(layout.padding)(root);
    return root.descendants();
};
export const Pack = (markOptions) => {
    return (viewOptions) => {
        const { width, height } = getBBoxSize(viewOptions);
        const { data, encode = {}, scale = {}, style = {}, layout = {}, labels = [] } = markOptions, resOptions = __rest(markOptions, ["data", "encode", "scale", "style", "layout", "labels"]);
        const DEFAULT_LAYOUT_OPTIONS = {
            size: [width, height],
            padding: 0,
            sort: (a, b) => b.value - a.value,
        };
        const DEFAULT_OPTIONS = {
            type: 'point',
            axis: false,
            legend: false,
            scale: {
                x: { domain: [0, width] },
                y: { domain: [0, height] },
                size: { type: 'identity' },
            },
            encode: {
                x: 'x',
                y: 'y',
                size: 'r',
                shape: 'point',
            },
            style: {
                fill: !encode.color
                    ? (d) => (d.height === 0 ? '#ddd' : '#fff')
                    : undefined,
                stroke: !encode.color
                    ? (d) => (d.height === 0 ? '' : '#000')
                    : undefined,
            },
        };
        const DEFAULT_LABEL_OPTIONS = {
            text: '',
            position: 'inside',
            textOverflow: 'clip',
            wordWrap: true,
            maxLines: 1,
            wordWrapWidth: (d) => d.r * 2,
        };
        const transformedData = dataTransform(data, deepMix({}, DEFAULT_LAYOUT_OPTIONS, layout), deepMix({}, DEFAULT_OPTIONS['encode'], encode));
        const labelStyle = subObject(style, 'label');
        return [
            deepMix({}, DEFAULT_OPTIONS, Object.assign(Object.assign({ data: transformedData, encode,
                scale,
                style, labels: [
                    Object.assign(Object.assign({}, DEFAULT_LABEL_OPTIONS), labelStyle),
                    ...labels,
                ] }, resOptions), { axis: false })),
        ];
    };
};
Pack.props = {};
//# sourceMappingURL=pack.js.map