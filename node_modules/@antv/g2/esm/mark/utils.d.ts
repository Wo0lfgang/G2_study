import { Band } from '@antv/scale';
import { Primitive } from 'd3-array';
import { Vector2 } from '@antv/coord';
import { Scale } from '../runtime/types/component';
import { Channel } from '../runtime';
export type ChannelOptions = {
    shapes?: string[];
};
export declare function baseChannels(options?: ChannelOptions): Channel[];
export declare function baseGeometryChannels(options?: ChannelOptions): Channel[];
export declare function tooltip2d(): ({
    type: string;
    channel: string;
} | {
    type: string;
    channel: string[];
})[];
export declare function tooltip1d(): ({
    type: string;
    channel: string;
} | {
    type: string;
    channel: string[];
})[];
export declare function tooltipXd(): ({
    type: string;
    channel: string;
} | {
    type: string;
    channel: string[];
})[];
export declare function baseAnnotationChannels(options?: ChannelOptions): Channel[];
export declare function basePreInference(): any[];
export declare function basePostInference(): {
    type: string;
}[];
export declare function bandWidth(scale: Band, x: any): number;
export declare function createBandOffset(scale: Record<string, Scale>, value: Record<string, Primitive[]>, options?: Record<string, any>): (d: [number, number], i?: number) => [number, number];
export declare function visualMark(index: number[], scale: any, value: any, coordinate: any): (number[] | Vector2[][])[];
type Encode = 'string' | ((d: any) => any);
export declare function field(encode: Encode): (d: any) => any;
export declare function valueof(data: Record<string, any>[], encode: Encode): any[];
export declare function initializeData(data: {
    nodes?: any[];
    links: any[];
}, encode: Record<string, Encode>): {
    links: {
        target: string;
        source: string;
        value: any;
    }[];
    nodes: {
        key: string;
    }[];
};
/**
 * @description Path need when the data is a flat json structure,
 * and the tree object structure do not need.
 */
export declare function generateHierarchyRoot(data: any[] | Record<string, any>, path: (d: any) => any): any;
export {};
