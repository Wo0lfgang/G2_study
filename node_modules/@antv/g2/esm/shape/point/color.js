var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Path } from '@antv/g';
import { isFisheye } from '../../utils/coordinate';
import { select } from '../../utils/selection';
import { applyStyle, getShapeTheme, toOpacityKey } from '../utils';
import * as Symbols from './symbol';
function getRadius(mode, points, value, coordinate) {
    if (points.length === 1)
        return undefined;
    const { size } = value;
    if (mode === 'fixed')
        return size;
    if (mode === 'normal' || isFisheye(coordinate)) {
        const [[x0, y0], [x2, y2]] = points;
        const a = Math.abs((x2 - x0) / 2);
        const b = Math.abs((y2 - y0) / 2);
        return Math.max(0, (a + b) / 2);
    }
    return size;
}
function getOrigin(points) {
    if (points.length === 1)
        return points[0];
    const [[x0, y0], [x2, y2]] = points;
    return [(x0 + x2) / 2, (y0 + y2) / 2];
}
/**
 * Render point in different coordinate.
 */
export const Color = (options) => {
    // Render border only when colorAttribute is stroke.
    const { colorAttribute, symbol, mode = 'auto' } = options, style = __rest(options, ["colorAttribute", "symbol", "mode"]);
    const path = Symbols[symbol] || Symbols.point;
    return (points, value, coordinate, theme) => {
        const { mark, shape, defaultShape } = value;
        const _a = getShapeTheme(theme, mark, shape, defaultShape), { defaultColor, lineWidth } = _a, defaults = __rest(_a, ["defaultColor", "lineWidth"]);
        const finalLineWidth = style.stroke ? lineWidth || 1 : lineWidth;
        const { color = defaultColor, transform, opacity } = value;
        const [cx, cy] = getOrigin(points);
        const r = getRadius(mode, points, value, coordinate);
        const finalRadius = r || style.r || defaults.r;
        return select(new Path())
            .call(applyStyle, defaults)
            .style('d', path(cx, cy, finalRadius))
            .style('lineWidth', finalLineWidth)
            .style('transform', transform)
            .style('stroke', color)
            .style(toOpacityKey(options), opacity)
            .style(colorAttribute, color)
            .call(applyStyle, style)
            .node();
    };
};
Color.props = {
    defaultEnterAnimation: 'fadeIn',
    defaultUpdateAnimation: 'morphing',
    defaultExitAnimation: 'fadeOut',
};
//# sourceMappingURL=color.js.map