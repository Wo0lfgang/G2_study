var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CustomElement } from '@antv/g';
import { deepMix } from '@antv/util';
import { Layout } from '@antv/gui';
import { select } from '../utils/selection';
export function createComponent(descriptor) {
    return class extends CustomElement {
        constructor(config) {
            super(config);
            this.descriptor = descriptor;
        }
        connectedCallback() {
            var _a, _b;
            (_b = (_a = this.descriptor).render) === null || _b === void 0 ? void 0 : _b.call(_a, this.attributes, this);
        }
        update(cfg = {}) {
            var _a, _b;
            this.attr(deepMix({}, this.attributes, cfg));
            (_b = (_a = this.descriptor).render) === null || _b === void 0 ? void 0 : _b.call(_a, this.attributes, this);
        }
    };
}
export function maybeAppend(parent, selector, node) {
    if (!parent.querySelector(selector)) {
        return select(parent).append(node);
    }
    return select(parent).select(selector);
}
export function titleContent(field) {
    return Array.isArray(field) ? field.join(', ') : `${field || ''}`;
}
export function inferComponentLayout(position, userDefinitions) {
    const preset = {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
    };
    if (userDefinitions) {
        return Object.assign(Object.assign({}, preset), userDefinitions);
    }
    let { flexDirection, justifyContent, alignItems } = preset;
    const layout = {
        top: ['row', 'center', 'center'],
        bottom: ['row', 'center', 'center'],
        left: ['colunm', 'center', 'center'],
        right: ['colunm', 'center', 'center'],
        center: ['column', 'center', 'center'],
    };
    if (position in layout) {
        [flexDirection, justifyContent, alignItems] = layout[position];
    }
    return { display: 'flex', flexDirection, justifyContent, alignItems };
}
export class G2Layout extends Layout {
    update(options) {
        var _a, _b;
        this.attr(options);
        const { width, height } = options, restOptions = __rest(options, ["width", "height"]);
        (_b = (_a = this.children) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.update(restOptions);
    }
}
export function scaleOf(scales, type) {
    var _a;
    return (_a = scales.filter((s) => s.getOptions().name === type)) === null || _a === void 0 ? void 0 : _a[0];
}
//# sourceMappingURL=utils.js.map